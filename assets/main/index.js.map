{"version":3,"sources":["../../file:/D:/cc/fart-blast/assets/src/view/tiles/block/file:/D:/cc/fart-blast/assets/src/view/tiles/block/BlockIcon.ts","../../file:/D:/cc/fart-blast/assets/src/view/tiles/bonus/file:/D:/cc/fart-blast/assets/src/view/tiles/bonus/BombIcon.ts","../../file:/D:/cc/fart-blast/assets/src/logic/tiles/file:/D:/cc/fart-blast/assets/src/logic/tiles/BonusGroup.ts","../../file:/D:/cc/fart-blast/assets/src/view/tiles/bonus/file:/D:/cc/fart-blast/assets/src/view/tiles/bonus/BonusIcon.ts","../../file:/D:/cc/fart-blast/assets/src/logic/boosters/file:/D:/cc/fart-blast/assets/src/logic/boosters/Booster.ts","../../file:/D:/cc/fart-blast/assets/src/logic/boosters/file:/D:/cc/fart-blast/assets/src/logic/boosters/BoosterBase.ts","../../file:/D:/cc/fart-blast/assets/src/logic/boosters/file:/D:/cc/fart-blast/assets/src/logic/boosters/BoosterBomb.ts","../../file:/D:/cc/fart-blast/assets/src/logic/boosters/file:/D:/cc/fart-blast/assets/src/logic/boosters/BoosterController.ts","../../file:/D:/cc/fart-blast/assets/src/logic/boosters/file:/D:/cc/fart-blast/assets/src/logic/boosters/BoosterShuffle.ts","../../file:/D:/cc/fart-blast/assets/src/view/tiles/block/file:/D:/cc/fart-blast/assets/src/view/tiles/block/BoxIcon.ts","../../file:/D:/cc/fart-blast/assets/src/view/tiles/block/file:/D:/cc/fart-blast/assets/src/view/tiles/block/BubbleIcon.ts","../../file:/D:/cc/fart-blast/assets/src/view/ui/buttons/file:/D:/cc/fart-blast/assets/src/view/ui/buttons/ButtonBase.ts","../../file:/D:/cc/fart-blast/assets/src/view/ui/buttons/file:/D:/cc/fart-blast/assets/src/view/ui/buttons/ButtonBomb.ts","../../file:/D:/cc/fart-blast/assets/src/view/ui/buttons/file:/D:/cc/fart-blast/assets/src/view/ui/buttons/ButtonBooster.ts","../../file:/D:/cc/fart-blast/assets/src/view/ui/buttons/file:/D:/cc/fart-blast/assets/src/view/ui/buttons/ButtonNext.ts","../../file:/D:/cc/fart-blast/assets/src/view/ui/buttons/file:/D:/cc/fart-blast/assets/src/view/ui/buttons/ButtonRetry.ts","../../file:/D:/cc/fart-blast/assets/src/view/ui/buttons/file:/D:/cc/fart-blast/assets/src/view/ui/buttons/ButtonShuffle.ts","../../file:/D:/cc/fart-blast/assets/src/logic/cell/file:/D:/cc/fart-blast/assets/src/logic/cell/Cell.ts","../../file:/D:/cc/fart-blast/assets/src/view/cell/file:/D:/cc/fart-blast/assets/src/view/cell/CellBack.ts","../../file:/D:/cc/fart-blast/assets/src/view/cell/file:/D:/cc/fart-blast/assets/src/view/cell/CellBackFactory.ts","../../file:/D:/cc/fart-blast/assets/src/view/cell/file:/D:/cc/fart-blast/assets/src/view/cell/CellBackSprite.ts","../../file:/D:/cc/fart-blast/assets/src/logic/cell/file:/D:/cc/fart-blast/assets/src/logic/cell/CellBase.ts","../../file:/D:/cc/fart-blast/assets/src/logic/tiles/file:/D:/cc/fart-blast/assets/src/logic/tiles/CellGroup.ts","../../file:/D:/cc/fart-blast/assets/src/logic/cell/file:/D:/cc/fart-blast/assets/src/logic/cell/CellTiles.ts","../../file:/D:/cc/fart-blast/assets/src/view/tiles/file:/D:/cc/fart-blast/assets/src/view/tiles/ColorIcon.ts","../../file:/D:/cc/fart-blast/assets/src/logic/field/file:/D:/cc/fart-blast/assets/src/logic/field/Column.ts","../../file:/D:/programming/tools/cocos-dashboard-editors/Creator/3.7.2/resources/resources/3d/engine/editor/assets/tools/file:/D:/programming/tools/cocos-dashboard-editors/Creator/3.7.2/resources/resources/3d/engine/editor/assets/tools/debug-view-runtime-control.ts","../../file:/D:/cc/fart-blast/assets/src/view/tiles/bonus/file:/D:/cc/fart-blast/assets/src/view/tiles/bonus/DiscoIcon.ts","../../file:/D:/cc/fart-blast/assets/src/logic/entities/file:/D:/cc/fart-blast/assets/src/logic/entities/EntityCell.ts","../../file:/D:/cc/fart-blast/assets/src/logic/entities/file:/D:/cc/fart-blast/assets/src/logic/entities/EntityTile.ts","../../file:/D:/cc/fart-blast/assets/src/logic/utils/file:/D:/cc/fart-blast/assets/src/logic/utils/EnumToArray.ts","../../file:/D:/cc/fart-blast/assets/src/logic/file:/D:/cc/fart-blast/assets/src/logic/EventManager.ts","../../file:/D:/cc/fart-blast/assets/src/logic/file:/D:/cc/fart-blast/assets/src/logic/Events.ts","../../file:/D:/cc/fart-blast/assets/src/logic/fsm/file:/D:/cc/fart-blast/assets/src/logic/fsm/FSM.ts","../../file:/D:/cc/fart-blast/assets/src/view/game/file:/D:/cc/fart-blast/assets/src/view/game/GameController.ts","../../file:/D:/cc/fart-blast/assets/src/view/game/file:/D:/cc/fart-blast/assets/src/view/game/GameFieldBack.ts","../../file:/D:/cc/fart-blast/assets/src/logic/field/file:/D:/cc/fart-blast/assets/src/logic/field/GameFieldCells.ts","../../file:/D:/cc/fart-blast/assets/src/logic/field/file:/D:/cc/fart-blast/assets/src/logic/field/GameFieldData.ts","../../file:/D:/cc/fart-blast/assets/src/logic/field/file:/D:/cc/fart-blast/assets/src/logic/field/GameFieldFSM.ts","../../file:/D:/cc/fart-blast/assets/src/view/game/file:/D:/cc/fart-blast/assets/src/view/game/GameFieldIcons.ts","../../file:/D:/cc/fart-blast/assets/src/logic/field/file:/D:/cc/fart-blast/assets/src/logic/field/GameFieldLogic.ts","../../file:/D:/cc/fart-blast/assets/src/view/game/file:/D:/cc/fart-blast/assets/src/view/game/GameFieldView.ts","../../file:/D:/cc/fart-blast/assets/src/view/file:/D:/cc/fart-blast/assets/src/view/GameLauncher.ts","../../file:/D:/cc/fart-blast/assets/src/logic/field/states/file:/D:/cc/fart-blast/assets/src/logic/field/states/GFState.ts","../../file:/D:/cc/fart-blast/assets/src/logic/field/states/file:/D:/cc/fart-blast/assets/src/logic/field/states/GFStateCheckGame.ts","../../file:/D:/cc/fart-blast/assets/src/logic/field/states/file:/D:/cc/fart-blast/assets/src/logic/field/states/GFStateClick.ts","../../file:/D:/cc/fart-blast/assets/src/logic/field/states/file:/D:/cc/fart-blast/assets/src/logic/field/states/GFStateDrop.ts","../../file:/D:/cc/fart-blast/assets/src/logic/field/states/file:/D:/cc/fart-blast/assets/src/logic/field/states/GFStateGameOver.ts","../../file:/D:/cc/fart-blast/assets/src/logic/field/states/file:/D:/cc/fart-blast/assets/src/logic/field/states/GFStateGroups.ts","../../file:/D:/cc/fart-blast/assets/src/logic/field/states/file:/D:/cc/fart-blast/assets/src/logic/field/states/GFStateHit.ts","../../file:/D:/cc/fart-blast/assets/src/logic/field/states/file:/D:/cc/fart-blast/assets/src/logic/field/states/GFStateIdle.ts","../../file:/D:/cc/fart-blast/assets/src/logic/field/states/file:/D:/cc/fart-blast/assets/src/logic/field/states/GFStateInit.ts","../../file:/D:/cc/fart-blast/assets/src/logic/field/states/file:/D:/cc/fart-blast/assets/src/logic/field/states/GFStateMerge.ts","../../file:/D:/cc/fart-blast/assets/src/logic/field/states/file:/D:/cc/fart-blast/assets/src/logic/field/states/GFStateSequenceHit.ts","../../file:/D:/cc/fart-blast/assets/src/logic/field/states/file:/D:/cc/fart-blast/assets/src/logic/field/states/GFStateShuffle.ts","../../file:/D:/cc/fart-blast/assets/src/logic/field/states/file:/D:/cc/fart-blast/assets/src/logic/field/states/GFStateWin.ts","../../file:/D:/cc/fart-blast/assets/src/logic/tiles/file:/D:/cc/fart-blast/assets/src/logic/tiles/Group.ts","../../file:/D:/cc/fart-blast/assets/src/view/tiles/file:/D:/cc/fart-blast/assets/src/view/tiles/Icon.ts","../../file:/D:/cc/fart-blast/assets/src/view/tiles/file:/D:/cc/fart-blast/assets/src/view/tiles/IconBase.ts","../../file:/D:/cc/fart-blast/assets/src/view/tiles/factory/file:/D:/cc/fart-blast/assets/src/view/tiles/factory/IconFactory.ts","../../file:/D:/cc/fart-blast/assets/src/view/ui/labels/file:/D:/cc/fart-blast/assets/src/view/ui/labels/LabelEvent.ts","../../file:/D:/cc/fart-blast/assets/src/view/ui/labels/file:/D:/cc/fart-blast/assets/src/view/ui/labels/LabelPoints.ts","../../file:/D:/cc/fart-blast/assets/src/view/ui/labels/file:/D:/cc/fart-blast/assets/src/view/ui/labels/LabelSteps.ts","../../file:/D:/cc/fart-blast/assets/src/view/file:/D:/cc/fart-blast/assets/src/view/LevelsConfig.ts","../../file:/D:/cc/fart-blast/assets/src/view/tiles/factory/file:/D:/cc/fart-blast/assets/src/view/tiles/factory/PrefabBlockTile.ts","../../file:/D:/cc/fart-blast/assets/src/view/tiles/factory/file:/D:/cc/fart-blast/assets/src/view/tiles/factory/PrefabBonusTile.ts","../../file:/D:/cc/fart-blast/assets/src/view/tiles/factory/file:/D:/cc/fart-blast/assets/src/view/tiles/factory/PrefabColorTile.ts","../../file:/D:/cc/fart-blast/assets/src/view/tiles/factory/file:/D:/cc/fart-blast/assets/src/view/tiles/factory/PrefabTile.ts","../../file:/D:/cc/fart-blast/assets/src/view/component/file:/D:/cc/fart-blast/assets/src/view/component/RenderNode.ts","../../file:/D:/cc/fart-blast/assets/src/view/tiles/bonus/file:/D:/cc/fart-blast/assets/src/view/tiles/bonus/RocketIcon.ts","../../file:/D:/cc/fart-blast/assets/src/logic/fsm/file:/D:/cc/fart-blast/assets/src/logic/fsm/StateBase.ts","../../file:/D:/cc/fart-blast/assets/src/logic/tiles/file:/D:/cc/fart-blast/assets/src/logic/tiles/Tile.ts","../../file:/D:/cc/fart-blast/assets/src/logic/tiles/file:/D:/cc/fart-blast/assets/src/logic/tiles/TileBase.ts","../../file:/D:/cc/fart-blast/assets/src/logic/tiles/block/file:/D:/cc/fart-blast/assets/src/logic/tiles/block/TileBlock.ts","../../file:/D:/cc/fart-blast/assets/src/logic/tiles/bonus/file:/D:/cc/fart-blast/assets/src/logic/tiles/bonus/TileBomb.ts","../../file:/D:/cc/fart-blast/assets/src/logic/tiles/bonus/file:/D:/cc/fart-blast/assets/src/logic/tiles/bonus/TileBonus.ts","../../file:/D:/cc/fart-blast/assets/src/logic/tiles/block/file:/D:/cc/fart-blast/assets/src/logic/tiles/block/TileBox.ts","../../file:/D:/cc/fart-blast/assets/src/logic/tiles/block/file:/D:/cc/fart-blast/assets/src/logic/tiles/block/TileBubble.ts","../../file:/D:/cc/fart-blast/assets/src/logic/tiles/file:/D:/cc/fart-blast/assets/src/logic/tiles/TileColor.ts","../../file:/D:/cc/fart-blast/assets/src/logic/tiles/bonus/file:/D:/cc/fart-blast/assets/src/logic/tiles/bonus/TileDisco.ts","../../file:/D:/cc/fart-blast/assets/src/logic/file:/D:/cc/fart-blast/assets/src/logic/TileFactory.ts","../../file:/D:/cc/fart-blast/assets/src/logic/tiles/bonus/file:/D:/cc/fart-blast/assets/src/logic/tiles/bonus/TileRocket.ts","../../file:/D:/cc/fart-blast/assets/src/view/cell/file:/D:/cc/fart-blast/assets/src/view/cell/ViewCell.ts","../../file:/D:/cc/fart-blast/assets/src/view/component/file:/D:/cc/fart-blast/assets/src/view/component/WidgetFit.ts","../../file:/D:/cc/fart-blast/assets/src/view/windows/file:/D:/cc/fart-blast/assets/src/view/windows/WindowBase.ts","../../file:/D:/cc/fart-blast/assets/src/view/windows/file:/D:/cc/fart-blast/assets/src/view/windows/WindowGameOver.ts","../../file:/D:/cc/fart-blast/assets/src/view/windows/file:/D:/cc/fart-blast/assets/src/view/windows/WindowManager.ts","../../file:/D:/cc/fart-blast/assets/src/view/windows/file:/D:/cc/fart-blast/assets/src/view/windows/WindowWin.ts"],"names":["ccclass","_decorator","property","type","Enum","BlockType","override","args","_this","_initializerDefineProperty","_inheritsLoose","_proto","start","_Icon","update","deltaTime","Icon","configurable","enumerable","writable","initializer","BonusType","visible","tile","_BonusIcon","BonusIcon","bomb","cell","_CellGroup","_burn","_removeTiles","_merge","this","_generateTiles","isEqual","src","target","typeString","tiles","size","color","countRocket","countBomb","countDisco","forEach","rocket","disco","_generateBlastAll","_generateTile","_generateBigBlast","_generateRocketCross","radius","create","direction","RocketDirection","cross","tileType","colorType","ColorType","gameField","eachCell","_cell$tile","replace","push","Math","max","columnCount","rowCount","_createClass","key","get","CellGroup","BoosterEvent","_count","apply","isEmpty","count","dispatch","applied","set","value","countChanged","BoosterBase","id","Events","toState","GFStateHit","Booster","ID","BoosterControllerEvent","_boosters","Map","_regBuster","BoosterBomb","BoosterShuffle","boosterClass","booster","getBooster","boosterType","has","active","unselect","console","log","select","selected","unselected","GFStateShuffle","BlockIcon","requireComponent","Button","Sprite","button","sprite","getComponent","Component","_selected","_normalColor","_selectColor","initBuster","BoosterController","_ButtonBooster","subscribe","onSelected","bind","onUnselected","onApplied","normalColor","clone","pressedColor","onDestroy","unsubscribeTag","onClick","hoverColor","ButtonBooster","Label","_ButtonBase","_onCountChanged","countLabel","string","toString","ButtonBase","EventManager","ButtonNext","ButtonRetry","x","y","CellType","_group","hit","_this$tile","pop","setGroup","group","resetGroup","undefined","obj","insert","fill","clear","isHole","isAlive","CellTiles","UITransform","_x","_y","_gameField","init","cellBackType","_getMapIndex","cellBackSprite","CellBackFactory","instance","_setBack","_getIndex","getCell","cellLeftTop","cellRightTop","cellLeftBottom","cellRightBottom","_cellExists","spriteFrame","pos","node","getPosition","setPosition","offset","CellBackSprite","_backs","onLoad","assert","_instance","_init","backs","back","_this2","CellBackType","SpriteFrame","v2","setGameField","hole","cells","Set","_searchTiles","canHit","burn","merge","bonusType","_getNewTypeTile","tileOrigin","_addUniq","eachNeighbor","cellTarget","_checkCell","add","CellTilesEvent","_tiles","TileFactory","_push","randomType","_tileReset","remove","index","indexOf","splice","resetCell","TileEvent","destroy","onTileDestroy","setCell","callback","_callbackCell","TileTypeToShort","length","CellBase","ParticleSystem2D","particle","worldPos","worldPosition","removeFromParent","setParent","gameFiledView","resetSystem","ColumnEvent","columnData","_cells","_parse","fillCells","drop","_createCell","ShortToTileType","Cell","find","Node","_single","strSingle","strComposite","strMisc","compositeModeToggleList","singleModeToggleList","miscModeToggleList","textComponentList","labelComponentList","textContentList","hideButtonLabel","_currentColorIndex","strColor","Color","WHITE","BLACK","RED","GREEN","BLUE","parent","Canvas","uiTransform","halfScreenWidth","width","halfScreenHeight","height","miscNode","getChildByName","buttonNode","instantiate","name","titleNode","i","newLabel","EnableAllCompositeModeButton","setScale","labelComponent","overflow","currentRow","newNode","singleModeToggle","textComponent","getComponentInChildren","RichText","on","Toggle","EventType","TOGGLE","toggleSingleMode","CLICK","enableAllCompositeMode","changeColorButton","changeTextColor","HideButton","hideUI","compositeModeToggle","isChecked","toggleLightingWithAlbedo","toggleCSMColoration","toggleCompositeMode","error","isTextMatched","textUI","textDescription","tempText","String","findIndex","search","substr","toggle","debugView","director","root","singleMode","enableCompositeMode","lightingWithAlbedo","csmLayerColoration","toggleComponent","activeValue","Colors","green","purple","red","blue","yellow","EnumToArray","model","Object","keys","filter","isNaN","Number","_events","event","tag","listener","listeners","hasEvent","unsubscribe","warn","_states","_state","_prevState","addState","ClassState","defaultState","state","context","_enterState","onEnter","_exitState","onExit","_getState","_level","_gameFieldView","GameController","_readComponents","_initField","_initListeners","GameFieldView","level","LevelsConfig","fieldData","GFStateWin","_onStateWin","GFStateGameOver","_onStateGameOver","_onRetry","_onNext","WindowManager","open","WindowWin","WindowGameOver","Prefab","Size","_transform","_offset","Vec2","ZERO","_getOffset","_createBacks","transform","cellSize","removeAllChildren","prefabCellBack","setSiblingIndex","_cellInitPosition","cellBack","CellBack","gameFieldData","_columns","_this$_columns$x","getColumn","columnIndex","eachColumn","column","hitCell","gameData","field","_createColumn","Column","getMatrixIds","matrix","row","GameFieldData","validate","assign","map","col","colIndex","columns","rowError","GameFieldFSM","_FSM","initFsm","_initStates","GFStateInit","GFStateIdle","GFStateGroups","GFStateClick","GFStateMerge","GFStateDrop","GFStateSequenceHit","GFStateCheckGame","FSM","GameFieldBack","filedData","GameFieldLogic","background","_this$background","_createTiles","cellsNode","_clearCells","viewCell","viewColumn","prefabCell","ViewCell","getCellPosition","v3","_getStartColumnWorldCoordinate","topCell","GameFieldEvent","_points","_steps","_selectedBooster","sequenceHitTiles","_initGoals","steps","points","click","_applySelectedBooster","_onStateHit","_onStateMerge","_activeBooster","_onSelectBooster","_onUnselectBooster","tilesHit","min","pointsChanged","stepsChanged","GameFieldCells","next","_GameFieldIcons","ViewCellEvent","_onCellClick","_onColumnFill","_onStateInit","_onStateGroups","_onStateIdle","_onStateClick","_onStateDrop","_onStateShuffle","startPos","icon","setWorldPosition","promises","delay","promise","Promise","resolve","setTimeout","all","then","viewCellTarget","_this3","flyTo","_this4","DROP_SPEED","DROP_DELAY","flyToHome","_this5","GameFieldIcons","addPersistRootNode","GameLauncher","StateBase","GFState","canMerge","_groups","_searchGroups","_clearGroups","Group","prevState","hitTiles","newTiles","isBonusGroup","BonusGroup","isColor","isBonus","sort","random","rebind","onTileHit","changeCell","onTileChangeCell","alpha","r","g","b","cellPrev","cellNew","wordPos","getWorldPosition","position","_context","tweenDuration","Vec3","tween","to","easing","onComplete","transformTarget","targetWorldPos","convertToWorldSpaceAR","convertToNodeSpaceAR","IconBase","PrefabColorTile","PrefabBonusTile","PrefabBlockTile","IconFactory","_regPrefabs","colorTiles","bonusTiles","blockTiles","prefabTiles","prefabTile","_createPrefab","prefab","label","setValue","initStartValue","getValueString","pointsTarget","LabelEvent","JsonAsset","configs","config","json","PrefabTile","_sprite","vertical","rotate","Quat","fromEuler","hp","_cell","cellNext","prevCell","Tile","tilesHitMerge","tilesSrc","tilesDst","valuesSrc","valueDst","TileBase","_Tile","_hitRadius","xStart","xEnd","yStart","yEnd","TileBonus","_TileBlock","box","TileBlock","bubble","floor","COLORS","TILE_CLASSES","TileRocket","TileBomb","TileDisco","TileBox","TileBubble","createTileColor","tileClass","TileColor","colorIndex","horizontal","_hitHorizontal","_hitVertical","tilesGroup","_createIcons","_createIcon","TOUCH_END","onCreateTile","onAddTile","onReplaceTile","children","iconNode","off","WidgetFitType","executeInEditMode","_targetTransform","_startSize","_startScale","ONE","_ratio","_target","onDisable","_removeListeners","_initTransform","_resized","_this$_target","_this$_target2","SIZE_CHANGED","_this$_target3","_scaleType","NONE","WIDTH","_fitWidth","HEIGHT","_fitHeight","ALL","scale","UIOpacity","fadeOut","close","fadeIn","fade","startOpacity","endOpacity","opa","opacity","WindowBase","_windowPrefabMap","_initWindows","windowsPrefab","data","_createWindow","windowType","window"],"mappings":"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","file":"all.js","sourcesContent":["import { _decorator, Component, Node, Enum } from 'cc';\nimport {BlockType} from \"../../../logic/entities/EntityTile\";\nimport {Icon} from \"../Icon\";\nconst { ccclass, property } = _decorator;\n\n@ccclass('BlockIcon')\nexport class BlockIcon extends Icon {\n    @property({\n        type: Enum(BlockType),\n        override: true\n    })\n    type: BlockType;\n\n    start() {\n        super.start();\n    }\n\n    update(deltaTime: number) {\n\n    }\n}\n\n","import { _decorator, Component, Node, Enum } from 'cc';\nimport {BonusIcon} from \"./BonusIcon\";\nimport {BonusType} from \"../../../logic/entities/EntityTile\";\nimport {TileBomb} from \"../../../logic/tiles/bonus/TileBomb\";\nconst { ccclass, property } = _decorator;\n\n@ccclass('BombIcon')\nexport class BombIcon extends BonusIcon {\n    @property({\n        type: Enum(BonusType),\n        visible: false,\n        override: true\n    })\n    type: BonusType = BonusType.bomb;\n    tile: TileBomb;\n    start() {\n        super.start();\n    }\n\n    update(deltaTime: number) {\n\n    }\n}\n\n","import {Tile} from \"./Tile\";\nimport {Cell} from \"../cell/Cell\";\nimport {BonusType, ColorType} from \"../entities/EntityTile\";\nimport {CellGroup} from \"./CellGroup\";\nimport {CellDataAsUnion} from \"../entities/EntityCell\";\nimport {TileDisco} from \"./bonus/TileDisco\";\nimport {RocketDirection, TileRocket} from \"./bonus/TileRocket\";\nimport {TileBomb} from \"./bonus/TileBomb\";\n\nexport class BonusGroup extends CellGroup {\n\n\n    constructor(cell: Cell) {\n        super(cell);\n    }\n\n    get canHit(): boolean {\n        return this.size > 0;\n    }\n\n    get canMerge(): boolean {\n        return this.size > 1;\n    }\n\n    protected _burn(cell: Cell) {\n        this._removeTiles();\n    }\n\n    protected _merge(cell: Cell): Tile[] {\n        return this._generateTiles(cell, this._removeTiles());\n    }\n\n    protected isEqual(src: Tile, target: Tile): boolean {\n        if (!src || !target)\n            return false;\n        return target.typeString in BonusType;\n    }\n\n    protected _generateTiles(cell: Cell, tiles: Tile[]): Tile[] {\n        if(this.size === 0)\n            return [];\n\n        let countRocket = 0;\n        let countBomb   = 0;\n        let countDisco  = 0;\n        let color: ColorType;\n\n        tiles.forEach((tile) => {\n            switch (tile.type) {\n                case BonusType.rocket:  countRocket++; break;\n                case BonusType.bomb:    countBomb++;   break;\n                case BonusType.disco:\n                    color = (tile as TileDisco).color;\n                    countDisco++;\n                break;\n            }\n        });\n\n        if (countDisco > 1)\n            return [this._generateBlastAll(cell)];\n\n        else if (countDisco > 0 && countBomb > 0)\n            return this._generateTile(cell, color, BonusType.bomb);\n\n        else if (countDisco > 0 && countRocket > 0)\n            return this._generateTile(cell, color, BonusType.rocket);\n\n        else if (countBomb > 1)\n            return [this._generateBigBlast(cell)];\n\n        else if (countBomb > 0 && countRocket > 0)\n            return [this._generateRocketCross(cell, 1)];\n\n        else if (countRocket > 1)\n            return [this._generateRocketCross(cell)];\n        return [];\n    }\n\n    private _generateRocketCross(cell: Cell, radius: number = 0): Tile {\n        let tile = cell.create(BonusType[BonusType.rocket] as CellDataAsUnion) as TileRocket;\n        tile.radius = radius;\n        tile.direction = RocketDirection.cross;\n        return tile;\n    }\n\n    private _generateBigBlast(cell: Cell, radius: number = 2): Tile {\n        let tile = cell.create(BonusType[BonusType.bomb] as CellDataAsUnion) as TileBomb;\n        tile.radius = radius;\n        return tile;\n    }\n\n    private _generateTile(cell: Cell, color: ColorType, tileType: BonusType): Tile[] {\n        let tiles: Tile[] = [];\n        const colorType = ColorType[color];\n        this.gameField.eachCell((cell: Cell) => {\n            if (cell.tile?.typeString === colorType) {\n                let tile = cell.replace(BonusType[tileType] as CellDataAsUnion);\n                tiles.push(tile);\n            }\n        });\n        return tiles;\n    }\n\n    private _generateBlastAll(cell: Cell): Tile {\n        return this._generateBigBlast(cell, Math.max(this.gameField.columnCount, this.gameField.rowCount));\n    }\n}\n","import { _decorator, Component, Node, Enum } from 'cc';\nimport {BonusType} from \"../../../logic/entities/EntityTile\";\nimport {Icon} from \"../Icon\";\nconst { ccclass, property } = _decorator;\n\n@ccclass('BonusIcon')\nexport class BonusIcon extends Icon {\n    @property({\n        type: Enum(BonusType),\n        override: true\n    })\n    type: BonusType;\n\n}\n\n","import {GameFieldLogic} from \"../field/GameFieldLogic\";\nimport {BoosterBase} from \"./BoosterBase\";\n\nexport enum BoosterEvent {\n    countChanged,\n    applied\n}\n\nexport abstract class Booster extends BoosterBase {\n\n    private _count: number = 3;\n    get count(): number { return this._count; };\n    set count(value: number) {\n        this._count = value;\n        this.dispatch(BoosterEvent.countChanged, this._count);\n    };\n\n    apply(gameField: GameFieldLogic, ...args: any[]): boolean {\n        if (this.isEmpty)\n            return false;\n\n        this.count--;\n        this.dispatch(BoosterEvent.applied, this._count);\n        return true;\n    }\n\n    get isEmpty(): boolean {\n        return this._count === 0;\n    }\n}\n","import {Events} from \"../Events\";\n\nexport abstract class BoosterBase extends Events {\n    readonly id: string;\n}\n","import {GameFieldLogic} from \"../field/GameFieldLogic\";\nimport {Cell} from \"../cell/Cell\";\nimport { Booster } from \"./Booster\";\nimport {BonusType} from \"../entities/EntityTile\";\nimport {CellDataAsUnion} from \"../entities/EntityCell\";\nimport {TileBomb} from \"../tiles/bonus/TileBomb\";\nimport {GFStateHit} from \"../field/states/GFStateHit\";\n\nexport class BoosterBomb extends Booster {\n    static ID = 'BoosterBomb';\n\n    apply(gameField: GameFieldLogic, cell: Cell): boolean {\n        if (!super.apply(gameField))\n            return false;\n\n        let tile = cell.replace(BonusType[BonusType.bomb] as CellDataAsUnion) as TileBomb;\n        tile.radius = 3;\n        gameField.toState(GFStateHit, cell);\n    }\n}\n","import {Booster} from \"./Booster\";\nimport {BoosterBomb} from \"./BoosterBomb\";\nimport {BoosterShuffle} from \"./BoosterShuffle\";\nimport {Events} from \"../Events\";\n\n\ntype BoosterMap = Map<string, Booster>\n\nexport enum BoosterControllerEvent {\n    active,\n    activated,\n    selected,\n    unselected\n}\n\nclass BoosterController extends Events {\n\n    private _boosters: BoosterMap = new Map<string, Booster>();\n    constructor() {\n        super();\n\n        this._regBuster(BoosterBomb);\n        this._regBuster(BoosterShuffle);\n    }\n\n    private _regBuster(boosterClass: any) {\n        let booster = new boosterClass();\n        booster.id = boosterClass.ID;\n        this._boosters.set(booster.id, booster);\n    }\n\n    getBooster(boosterType: any): Booster | undefined {\n        return this._boosters.get(boosterType.ID);\n    }\n\n    has(boosterType: any): boolean {\n        return !!this.getBooster(boosterType);\n    }\n\n    isEmpty(boosterType: any): boolean {\n        let booster = this.getBooster(boosterType);\n        if (!booster)\n            return true;\n        return booster.isEmpty;\n    }\n\n    active(boosterType: any): boolean {\n        this.unselect();\n        let booster = this.getBooster(boosterType);\n        if (!booster)\n            return false;\n        if (booster.isEmpty)\n            return false;\n\n        console.log(`active booster: ${booster.id}`);\n        this.dispatch(BoosterControllerEvent.active, booster);\n        return true;\n    }\n\n    select(boosterType: any): boolean {\n        let booster = this.getBooster(boosterType);\n        if (!booster)\n            return false;\n        if (booster.isEmpty)\n            return false;\n        console.log(`select booster: ${booster.id}`);\n        this.dispatch(BoosterControllerEvent.selected, booster);\n        return true;\n    }\n\n    unselect() {\n        console.log(`unselect booster`);\n        this.dispatch(BoosterControllerEvent.unselected);\n    }\n\n\n\n}\n\nexport default new BoosterController();\n\n","import {GameFieldLogic} from \"../field/GameFieldLogic\";\nimport {Booster} from \"./Booster\";\nimport {Cell} from \"../cell/Cell\";\nimport {GFStateShuffle} from \"../field/states/GFStateShuffle\";\nimport { Tile } from \"../tiles/Tile\";\n\nexport class BoosterShuffle extends Booster {\n    static ID = 'BoosterShuffle';\n\n    apply(gameField: GameFieldLogic): boolean {\n        if (!super.apply(gameField))\n            return false;\n        gameField.toState(GFStateShuffle);\n        return true;\n    }\n}\n","import { _decorator, Component, Node } from 'cc';\nimport {BlockIcon} from './BlockIcon';\nconst { ccclass, property } = _decorator;\n\n@ccclass('BoxIcon')\nexport class BoxIcon extends BlockIcon {\n    start() {\n\n    }\n\n    update(deltaTime: number) {\n\n    }\n}\n\n","import { _decorator, Component, Node } from 'cc';\nimport {BlockIcon} from \"./BlockIcon\";\nconst { ccclass, property } = _decorator;\n\n@ccclass('BubbleIcon')\nexport class BubbleIcon extends BlockIcon {\n    start() {\n\n    }\n\n    update(deltaTime: number) {\n\n    }\n}\n\n","import { _decorator, Component, Node, Button, Sprite } from 'cc';\nimport {BoosterEvent} from \"../../../logic/boosters/Booster\";\nconst { ccclass, property, requireComponent } = _decorator;\n\n@ccclass('ButtonBase')\n@requireComponent(Button)\n@requireComponent(Sprite)\nexport abstract class  ButtonBase extends Component {\n    abstract onClick(...args: any[]);\n\n    protected button: Button;\n    protected sprite: Sprite;\n    start() {\n        this.button = this.getComponent(Button);\n        this.sprite = this.getComponent(Sprite);\n    }\n}\n\n","import { _decorator, Component, Node, Color, log } from 'cc';\nimport {ButtonBooster} from \"./ButtonBooster\";\nimport {Booster, BoosterEvent} from \"../../../logic/boosters/Booster\";\nimport BoosterController, {BoosterControllerEvent} from \"../../../logic/boosters/BoosterController\";\nimport {BoosterBomb} from \"../../../logic/boosters/BoosterBomb\";\nconst { ccclass, property } = _decorator;\n\n@ccclass('ButtonBomb')\nexport class ButtonBomb extends ButtonBooster {\n\n    private _selected: boolean = false;\n    private _normalColor: Color;\n    private _selectColor: Color;\n\n    get selected() {return this._selected};\n    set selected(value: boolean) {\n        this._selected = value;\n        this.button.normalColor = this.button.hoverColor = this._selected ? this._selectColor : this._normalColor;\n    }\n\n    initBuster(): Booster {\n        this.booster = BoosterController.getBooster(BoosterBomb);\n        return this.booster;\n    }\n\n    start() {\n        super.start();\n        BoosterController.subscribe(BoosterControllerEvent.selected, this.onSelected.bind(this), this);\n        BoosterController.subscribe(BoosterControllerEvent.unselected, this.onUnselected.bind(this), this);\n        this.booster.subscribe(BoosterEvent.applied, this.onApplied.bind(this), this);\n\n        this._normalColor = this.button.normalColor.clone();\n        this._selectColor = this.button.pressedColor.clone();\n    }\n\n    onDestroy() {\n        super.onDestroy();\n        BoosterController.unsubscribeTag(this);\n        this.booster.unsubscribeTag(this);\n    }\n\n    onSelected(booster: Booster) {\n        this.selected = booster.id === this.booster.id;\n    }\n\n    onUnselected() {\n        this.selected = false;\n    }\n\n    onApplied(booster: Booster) {\n        BoosterController.unselect();\n    }\n\n    onClick() {\n        if (!this._selected) {\n            super.onClick();\n\n            if (BoosterController.isEmpty(BoosterBomb))\n                return;\n            BoosterController.select(BoosterBomb);\n        }\n        else {\n            BoosterController.unselect();\n        }\n    }\n}\n\n","import { _decorator, Component, Node, Label } from 'cc';\nimport { ButtonBase } from './ButtonBase';\nimport {Booster, BoosterEvent} from \"../../../logic/boosters/Booster\";\nconst { ccclass, property } = _decorator;\n\n@ccclass('ButtonBooster')\nexport abstract class ButtonBooster extends ButtonBase {\n\n    @property(Label)\n    countLabel: Label;\n\n    protected booster: Booster;\n    abstract initBuster(): Booster;\n\n    start() {\n        super.start();\n        this.initBuster();\n        this.booster.subscribe(BoosterEvent.countChanged, this._onCountChanged.bind(this), this);\n        this._onCountChanged(this.booster.count);\n    }\n\n    onDestroy() {\n        this.booster.unsubscribeTag(this);\n    }\n\n    private _onCountChanged(count: number) {\n        this.countLabel.string = count.toString();\n    }\n\n    onClick() {\n\n    }\n}\n\n","import { _decorator, Component, Node } from 'cc';\nimport {ButtonBase} from \"./ButtonBase\";\nimport EventManager from \"../../../logic/EventManager\";\nconst { ccclass, property } = _decorator;\n\n@ccclass('ButtonNext')\nexport class ButtonNext extends ButtonBase {\n    static ID = 'ButtonNext';\n\n    onClick() {\n        EventManager.dispatch(ButtonNext.ID);\n    }\n\n\n}\n\n","import { _decorator, Component, Node } from 'cc';\nimport {ButtonBase} from \"./ButtonBase\";\nimport EventManager from \"../../../logic/EventManager\";\nconst { ccclass, property } = _decorator;\n\n@ccclass('ButtonRetry')\nexport class ButtonRetry extends ButtonBase {\n    static ID = 'ButtonRetry';\n    onClick() {\n        EventManager.dispatch(ButtonRetry.ID);\n    }\n\n\n}\n\n","import { _decorator, Component, Node, log } from 'cc';\nimport {ButtonBooster} from \"./ButtonBooster\";\nimport BoosterController, {BoosterControllerEvent} from '../../../logic/boosters/BoosterController';\nimport {BoosterShuffle} from \"../../../logic/boosters/BoosterShuffle\";\nimport {Booster} from \"../../../logic/boosters/Booster\";\nconst { ccclass, property } = _decorator;\n\n@ccclass('ButtonShuffle')\nexport class ButtonShuffle extends ButtonBooster {\n\n\n    initBuster(): Booster {\n        this.booster = BoosterController.getBooster(BoosterShuffle);\n        return this.booster;\n    }\n\n    onClick() {\n        super.onClick();\n\n        if (BoosterController.isEmpty(BoosterShuffle))\n            return;\n        BoosterController.active(BoosterShuffle);\n    }\n}\n\n","import {CellDataAsUnion, CellType, ICellData} from \"../entities/EntityCell\";\nimport {Tile, TilesHit} from \"../tiles/Tile\";\nimport TileFactory from \"../TileFactory\";\nimport {CellTiles} from \"./CellTiles\";\nimport {CellGroup} from \"../tiles/CellGroup\";\n\nexport class Cell extends CellTiles {\n\n    private _group: CellGroup;\n    get group(): CellGroup { return this._group; };\n\n    constructor(x: number, y: number, type: CellType = CellType.cell) {\n        super(x, y, type);\n    }\n\n    get canHit(): boolean {\n        return !this.isHole && !this.isEmpty && this.tile.isAlive;\n    }\n\n    hit(): TilesHit {\n        let tiles = this.tile?.hit();\n        this.pop();\n        return tiles;\n    }\n\n    setGroup(group: CellGroup) {\n        this._group = group;\n    }\n\n    resetGroup() {\n        this._group = undefined;\n    }\n\n    create(obj: CellDataAsUnion): Tile {\n        this.resetGroup();\n        return super.create(obj);\n    }\n\n    insert(tile: Tile): Tile {\n        this.resetGroup();\n        return super.insert(tile);\n    }\n\n    replace(obj: CellDataAsUnion): Tile {\n        this.resetGroup();\n        return super.replace(obj);\n    }\n\n    fill(): Tile | undefined {\n        this.resetGroup();\n        return super.fill();\n    }\n\n    pop(): Tile {\n        this.resetGroup();\n        return super.pop();\n    }\n\n    clear(): Tile[] {\n        this.resetGroup();\n        return super.clear();\n    }\n\n\n}\n","import {_decorator, Component, Sprite, UITransform} from 'cc';\nimport {CellBackSprite, CellBackType} from \"./CellBackSprite\";\nimport {GameFieldLogic} from \"../../logic/field/GameFieldLogic\";\nimport { CellBackFactory } from './CellBackFactory';\nimport { Cell } from '../../logic/cell/Cell';\n\nconst { ccclass, requireComponent, property } = _decorator;\n\n@ccclass('CellBack')\n@requireComponent(UITransform)\n@requireComponent(Sprite)\nexport class CellBack extends Component {\n\n    private _x: number;\n    private _y: number;\n    private _gameField: GameFieldLogic;\n\n\n    init(x: number, y: number, gameField: GameFieldLogic) {\n        this._x = x;\n        this._y = y;\n        this._gameField = gameField;\n\n        const cellBackType = this._getMapIndex();\n        const cellBackSprite = CellBackFactory.instance.get(cellBackType);\n        this._setBack(cellBackSprite);\n    }\n\n    private _getMapIndex(): CellBackType {\n        const index = this._getIndex(\n            this._gameField.getCell(this._x - 1, this._y - 1),\n            this._gameField.getCell(this._x, this._y - 1),\n            this._gameField.getCell(this._x - 1, this._y),\n            this._gameField.getCell(this._x, this._y)\n        );\n        return index;\n    }\n\n    // order index cellsNode\n    // [ 0, 1 ]\n    // [ 2, 3 ]\n    private _getIndex(cellLeftTop: Cell, cellRightTop: Cell, cellLeftBottom: Cell, cellRightBottom: Cell): number {\n        return  this._cellExists(cellLeftTop)             |\n                this._cellExists(cellRightTop)       << 1 |\n                this._cellExists(cellLeftBottom)     << 2 |\n                this._cellExists(cellRightBottom)    << 3;\n    }\n\n    private _cellExists(cell: Cell): number {\n        return (cell && !cell.isHole) ? 1 : 0;\n    }\n\n    private _setBack(cellBackSprite: CellBackSprite){\n        if(!cellBackSprite)\n            return;\n\n        let sprite = this.getComponent(Sprite);\n        sprite.spriteFrame = cellBackSprite.spriteFrame;\n        let pos = sprite.node.getPosition();\n        sprite.node.setPosition(pos.x + cellBackSprite.offset.x, pos.y + cellBackSprite.offset.y);\n    }\n\n}\n\n","import {_decorator, assert, Component, director, instantiate, Node, Prefab} from 'cc';\nimport {CellBackSprite, CellBackType} from \"./CellBackSprite\";\n\nconst { ccclass, property } = _decorator;\n\ntype SpriteMap = Map<CellBackType, CellBackSprite>;\nexport type CellMap = boolean[][];\n\n@ccclass('CellBackFactory')\nexport class CellBackFactory extends Component {\n\n    @property([CellBackSprite])\n    backs: CellBackSprite[] = [];\n\n    private _backs: SpriteMap = new Map<CellBackType, CellBackSprite>();\n\n    private static _instance: CellBackFactory = null;\n    public static get instance(): CellBackFactory {\n        assert(this._instance, \"CellBackFactory instance is null\");\n        return this._instance;\n    }\n\n    onLoad() {\n        assert(!CellBackFactory._instance, \"Only one instance allowed\");\n        CellBackFactory._instance = this;\n        this._init();\n    }\n\n    private _init() {\n        this.backs.forEach(back => this._backs.set(back.type, back));\n    }\n\n    get(cellBackType: CellBackType): CellBackSprite {\n        return this._backs.get(cellBackType);\n    }\n\n}\n\n","import { _decorator, Component, Node, Prefab, Enum, Sprite, Vec2, SpriteFrame, v2 } from 'cc';\nconst { ccclass, property } = _decorator;\n\nexport enum CellBackType {\n    HOLE            = 0,\n\n    LEFT            = 5,\n    RIGHT           = 10,\n    TOP             = 3,\n    BOTTOM          = 12,\n\n    LEFT_TOP        = 1,\n    RIGHT_TOP       = 2,\n    LEFT_BOTTOM     = 4,\n    RIGHT_BOTTOM    = 8,\n\n    OUT_RIGHT_TOP   = 13,\n    OUT_LEFT_TOP    = 14,\n    OUT_RIGHT_BOTTOM= 7,\n    OUT_LEFT_BOTTOM = 11,\n\n    SLASH_RIGHT     = 6,\n    SLASH_LEFT      = 9,\n\n    ALL             = 15\n}\n\n@ccclass('CellBackSprite')\nexport class CellBackSprite {\n\n    @property({type: Enum(CellBackType)})\n    type: CellBackType;\n\n    @property(SpriteFrame)\n    spriteFrame: SpriteFrame;\n\n    @property\n    offset: Vec2 = v2(0, 0);\n}\n\n","import {CellType, ICellData} from \"../entities/EntityCell\";\nimport {GameFieldCells} from \"../field/GameFieldCells\";\nimport {Events} from \"../Events\";\n\nexport class CellBase extends Events implements ICellData {\n\n    gameField: GameFieldCells;\n\n    readonly type: CellType;\n    readonly x: number;\n    readonly y: number;\n\n    constructor(x: number, y: number, type: CellType = CellType.cell) {\n        super();\n        this.x = x;\n        this.y = y;\n        this.type = type;\n    }\n\n    get isHole(): boolean {\n        return this.type === CellType.hole;\n    }\n\n    setGameField(gameField: GameFieldCells) {\n        this.gameField = gameField;\n    }\n}\n","import {GameFieldLogic} from \"../field/GameFieldLogic\";\nimport {Tile, TilesHit} from \"./Tile\";\nimport { Cell } from \"../cell/Cell\";\nimport {GameFieldCells} from \"../field/GameFieldCells\";\nimport {BonusType, ColorType, TileType} from \"../entities/EntityTile\";\nimport {CellTiles} from \"../cell/CellTiles\";\nimport {CellDataAsUnion} from \"../entities/EntityCell\";\nimport TileFactory from \"../TileFactory\";\nimport {TileDisco} from \"./bonus/TileDisco\";\nimport {TileColor} from \"./TileColor\";\n\nexport class CellGroup {\n\n    protected gameField: GameFieldCells;\n    // protected type: GroupType;\n    // get typeGroup(): GroupType { return this.type; };\n    protected cells: Set<Cell> = new Set<Cell>();\n    get size(): number { return this.cells.size; };\n\n    constructor(cell: Cell) {\n        if (cell.gameField) {\n            this.gameField = cell.gameField;\n            this._searchTiles(cell);\n            // this.initType();\n        }\n    }\n\n\n    get canHit(): boolean {\n        return this.size > 1;\n    }\n\n    get canMerge(): boolean {\n        return this.size > 4;\n    }\n\n    get tiles(): Tile[] {\n        let tiles: Tile[] = [];\n        this.cells.forEach(cell=>  tiles.push(cell.tile));\n        return tiles;\n    }\n\n    hit(cell: Cell): TilesHit {\n        let tiles: Tile[][] = [];\n        this.cells.forEach((cell) => {\n            if(cell.canHit) {\n                tiles.push(...cell.hit());\n            }\n        });\n        return tiles;\n    }\n\n    burn(cell: Cell) {\n        this._removeTiles();\n    }\n\n    merge(cell: Cell): Tile[] {\n        return this._merge(cell);\n    }\n\n    protected _merge(cell: Cell): Tile[] {\n        let bonusType = this._getNewTypeTile();\n\n        const tileOrigin = cell.tile as TileColor;\n        this._removeTiles();\n        let tile = cell.create(BonusType[bonusType] as CellDataAsUnion);\n\n        if (tile.typeString === BonusType[BonusType.disco]) {\n            let tileDisco = (tile as any) as TileDisco;\n            tileDisco.color = tileOrigin.type as ColorType;\n        }\n        return [tile];\n    }\n\n    private _getNewTypeTile(): BonusType {\n        if(this.size > 8 )\n            return BonusType.disco;\n        else if (this.size > 6)\n            return BonusType.bomb;\n        else if (this.size > 4)\n            return BonusType.rocket;\n    }\n\n    protected _removeTiles(): Tile[] {\n        let tiles: Tile[] = [];\n        this.cells.forEach((cell) => {\n            tiles.push(cell.pop());\n        });\n        return tiles;\n    }\n\n    private _searchTiles(cell: Cell) {\n        if (cell.isHole || cell.isEmpty)\n            return;\n\n        const tile = cell.tile;\n        if (!tile)\n            return;\n\n        if (cell.group)\n            return;\n\n        this._addUniq(cell);\n        cell.eachNeighbor((cellTarget: Cell) => {\n            if (this._checkCell(cell, cellTarget))\n                this._searchTiles(cellTarget);\n        });\n    }\n\n    private _checkCell(src: Cell, target: Cell): boolean {\n        if(target.isEmpty)\n            return false;\n        if(target.group)\n            return false;\n        return this.isEqual(src.tile, target.tile);\n    }\n\n    private _addUniq(cell: Cell): boolean {\n        if (this.cells.has(cell))\n            return false;\n\n        cell.setGroup(this);\n        this.cells.add(cell);\n        return true\n    }\n\n    protected isEqual(src: Tile, target: Tile): boolean {\n        if (!src || !target)\n            return false;\n        return src.typeString === target.typeString;\n    }\n}\n","import {CellDataAsUnion, CellType, ICellData} from \"../entities/EntityCell\";\nimport {CellBase} from \"./CellBase\";\nimport {Tile, TileEvent} from \"../tiles/Tile\";\nimport TileFactory from \"../TileFactory\";\nimport {Cell} from \"./Cell\";\nimport {TileTypeToShort} from \"../entities/EntityTile\";\n\nexport type CellCallback = (cell: CellTiles) => void;\n\nexport enum CellTilesEvent {\n    insert,\n    create,\n    replace,\n    pop\n\n}\n\nexport class CellTiles extends CellBase {\n\n    private _tiles: Tile[] = [];\n\n    constructor(x: number, y: number, type: CellType = CellType.cell) {\n        super(x, y, type);\n    }\n\n    get isEmpty(): boolean {\n        return (this._tiles.length === 0);\n    }\n\n    get tiles(): Tile[] {\n        return this._tiles;\n    }\n\n    get tile(): Tile | undefined {\n        return this._tiles[this._tiles.length - 1];\n    }\n\n\n    create (obj: CellDataAsUnion): Tile {\n        if(this.isHole)\n            return;\n        let tile: Tile = TileFactory.create(obj);\n        this._push(tile);\n        this.dispatch(CellTilesEvent.create, tile);\n        return tile;\n    }\n\n    replace (obj: CellDataAsUnion): Tile {\n        this.clear();\n        if(this.isHole)\n            return;\n        let tile: Tile = TileFactory.create(obj);\n        this._push(tile);\n        this.dispatch(CellTilesEvent.replace, tile);\n        return tile;\n    }\n\n    insert (tile: Tile): Tile {\n        if(this.isHole)\n            return;\n        this._push(tile);\n        this.dispatch(CellTilesEvent.insert, tile);\n        return tile;\n    }\n\n    fill (): Tile | undefined {\n        if (this.isHole || !this.isEmpty)\n            return;\n        return this.create(TileFactory.randomType);\n    }\n\n\n    pop(): Tile {\n        let tile = this._tiles.pop();\n        this._tileReset(tile);\n        return tile;\n    }\n\n    clear(): Tile[] {\n        let tiles: Tile[] = [];\n        while(!this.isEmpty)\n            tiles.push(this.pop());\n        return tiles;\n    }\n\n    remove(tile: Tile) {\n        const index = this._tiles.indexOf(tile);\n        if (index > -1)\n            this._tiles.splice(index, 1);\n        this._tileReset(tile);\n    }\n\n    private _tileReset(tile: Tile) {\n        tile.unsubscribeTag(this);\n        tile.resetCell();\n    }\n\n    private _push(tile: Tile) {\n        if (!tile)\n            return;\n        this._tiles.push(tile);\n\n        tile.subscribe(TileEvent.destroy, this.onTileDestroy.bind(this), this);\n\n        tile.setGameField(this.gameField);\n        tile.setCell(this);\n    }\n\n    onTileDestroy(tile: Tile) {\n        this.remove(tile);\n    }\n\n    eachNeighbor(callback: CellCallback) {\n        if(!callback || !this.gameField)\n            return;\n\n        this._callbackCell(this.gameField.getCell(this.x - 1, this.y), callback);\n        this._callbackCell(this.gameField.getCell(this.x, this.y - 1), callback);\n        this._callbackCell(this.gameField.getCell(this.x + 1, this.y), callback);\n        this._callbackCell(this.gameField.getCell(this.x, this.y + 1), callback);\n    }\n\n    private _callbackCell(cell, callback: CellCallback) {\n        if (cell)\n            callback(cell);\n    }\n\n    toString() {\n        if(this.isHole)\n            return '_';\n        if(this.isEmpty)\n            return 'e';\n        return TileTypeToShort[this.tile.typeString];\n    }\n}\n","import { _decorator, Component, Node, Enum, ParticleSystem2D, log } from 'cc';\nimport {ColorType} from \"../../logic/entities/EntityTile\";\nimport {Icon} from \"./Icon\";\nimport {Tile} from \"../../logic/tiles/Tile\";\nimport {Cell} from \"../../logic/cell/Cell\";\nconst { ccclass, property } = _decorator;\n\n@ccclass('ColorIcon')\nexport class ColorIcon extends Icon {\n    @property({\n        type: Enum(ColorType),\n        override: true\n    })\n    type: ColorType;\n\n    @property(ParticleSystem2D)\n    particle: ParticleSystem2D;\n\n    start() {\n        super.start();\n    }\n\n    onTileDestroy() {\n        if (this.particle) {\n            this.particle.node.active = true;\n            const worldPos = this.particle.node.worldPosition;\n            this.particle.node.removeFromParent();\n            this.particle.node.setParent(this.gameFiledView.node);\n            this.particle.node.worldPosition = worldPos;\n            this.particle.resetSystem();\n            this.particle = undefined;\n        }\n        super.onTileDestroy();\n    }\n\n    onClick() {\n\n    }\n\n}\n\n\n","import {ColumnData} from \"../entities/EntityGame\";\nimport {Cell} from \"../cell/Cell\";\nimport {CellType, CellDataAsUnion} from \"../entities/EntityCell\";\nimport {GameFieldCells} from \"./GameFieldCells\";\nimport {CellCallback, CellTiles} from \"../cell/CellTiles\";\nimport {Events} from \"../Events\";\nimport EventManager from \"../EventManager\";\nimport {ShortToTileType} from \"../entities/EntityTile\";\n\nexport enum ColumnEvent {\n    fill= 'ColumnFill'\n}\n\nexport type ColumnCallback = (column: Column) => void;\n\nexport class Column extends Events {\n    readonly gameField: GameFieldCells;\n    readonly x: number;\n    private _cells: Cell[];\n\n    constructor(gameField: GameFieldCells, x: number, columnData: ColumnData) {\n        super();\n        this.gameField = gameField;\n        this.x = x;\n        this._parse(columnData);\n        this.fill();\n    }\n\n    get cells (): Cell[] {\n        return this._cells;\n    }\n\n    get topCell(): Cell | undefined {\n        return this._cells.find(cell => !cell.isHole);\n    }\n\n    getCell(y: number): Cell {\n        return this._cells[y];\n    }\n\n    eachCell(callback: CellCallback) {\n        if(!callback)\n            return;\n        this._cells.forEach((cell, y) => {\n            callback(cell);\n        });\n    }\n\n    fill () {\n        let fillCells: Cell[] = [];\n        this._cells.forEach((cell, y) => {\n            if (cell.fill())\n                fillCells.push(cell);\n        });\n        EventManager.dispatch(ColumnEvent.fill, this, fillCells);\n    }\n\n    drop() {\n        for(let y = this._cells.length - 1; y >= 0; y--) {\n            let cell = this._cells[y];\n            if(!cell.isEmpty)\n                cell.tile.drop();\n        }\n    }\n\n    private _parse (columnData: ColumnData) {\n        this._cells = [];\n        columnData.forEach((obj, y) => {\n            let cell = this._createCell(ShortToTileType[obj], this.x, y);\n            this._cells.push(cell);\n        });\n    }\n\n    private _createCell(obj: CellDataAsUnion, x: number, y: number): Cell {\n        let cell: Cell;\n        if (obj === CellType[CellType.hole]) {\n            cell = new Cell(x, y, CellType.hole);\n            return cell;\n        }\n        cell = new Cell(x, y);\n        cell.setGameField(this.gameField);\n        cell.create(obj);\n        return cell;\n    }\n\n\n\n}\n\n","import { Color, Canvas, UITransform, instantiate, math, Toggle, TextureCube, _decorator, Component, Button, labelAssembler, game, director, Node, Scene, renderer, CameraComponent, Label, ForwardPipeline, RichText } from 'cc';\r\nconst { ccclass, property } = _decorator;\r\n\r\n@ccclass('internal.DebugViewRuntimeControl')\r\nexport class DebugViewRuntimeControl extends Component {\r\n    @property(Node)\r\n    compositeModeToggle: Node | null = null;\r\n    @property(Node)\r\n    singleModeToggle: Node | null = null;\r\n    @property(Node)\r\n    EnableAllCompositeModeButton: Node | null = null;\r\n\t_single: number = 0;\r\n\r\n    private strSingle: string[] = [\r\n        'No Single Debug',\r\n        'Vertex Color',\r\n        'Vertex Normal',\r\n        'Vertex Tangent',\r\n        'World Position',\r\n        'Vertex Mirror',\r\n        'Face Side',\r\n        'UV0',\r\n        'UV1',\r\n        'UV Lightmap',\r\n        'Project Depth',\r\n        'Linear Depth',\r\n\r\n        'Fragment Normal',\r\n        'Fragment Tangent',\r\n        'Fragment Binormal',\r\n        'Base Color',\r\n        'Diffuse Color',\r\n        'Specular Color',\r\n        'Transparency',\r\n        'Metallic',\r\n        'Roughness',\r\n        'Specular Intensity',\r\n        'IOR',\r\n\r\n        'Direct Diffuse',\r\n        'Direct Specular',\r\n        'Direct All',\r\n        'Env Diffuse',\r\n        'Env Specular',\r\n        'Env All',\r\n        'Emissive',\r\n        'Light Map',\r\n        'Shadow',\r\n        'AO',\r\n\r\n        'Fresnel',\r\n        'Direct Transmit Diffuse',\r\n        'Direct Transmit Specular',\r\n        'Env Transmit Diffuse',\r\n        'Env Transmit Specular',\r\n        'Transmit All',\r\n        'Direct TRT',\r\n        'Env TRT',\r\n        'TRT All',\r\n\r\n        'Fog',\r\n    ];\r\n    private strComposite: string[] = [\r\n        'Direct Diffuse',\r\n        'Direct Specular',\r\n        'Env Diffuse',\r\n        'Env Specular',\r\n        'Emissive',\r\n        'Light Map',\r\n        'Shadow',\r\n        'AO',\r\n\r\n        'Normal Map',\r\n        'Fog',\r\n\r\n        'Tone Mapping',\r\n        'Gamma Correction',\r\n\r\n        'Fresnel',\r\n        'Transmit Diffuse',\r\n        'Transmit Specular',\r\n        'TRT',\r\n        'TT',\r\n    ];\r\n    private strMisc: string[] = [\r\n        'CSM Layer Coloration',\r\n        'Lighting With Albedo',\r\n    ];\r\n\r\n    private compositeModeToggleList: Node[] = [];\r\n    private singleModeToggleList: Node[] = [];\r\n    private miscModeToggleList: Node[] = [];\r\n    private textComponentList: RichText[] = [];\r\n    private labelComponentList: Label[] = [];\r\n    private textContentList: string[] = [];\r\n    private hideButtonLabel: Label;\r\n    start() {\r\n        // get canvas resolution\r\n        const canvas = this.node.parent.getComponent(Canvas);\r\n        if (!canvas) {\r\n            console.error('debug-view-runtime-control should be child of Canvas');\r\n            return;\r\n        }\r\n\r\n        const uiTransform = this.node.parent.getComponent(UITransform);\r\n        const halfScreenWidth = uiTransform.width * 0.5;\r\n        const halfScreenHeight = uiTransform.height * 0.5;\r\n\r\n        let x = -halfScreenWidth + halfScreenWidth * 0.1, y = halfScreenHeight - halfScreenHeight * 0.1;\r\n        const width = 200, height = 20;\r\n\r\n        // new nodes\r\n        const miscNode = this.node.getChildByName('MiscMode');\r\n        const buttonNode = instantiate(miscNode);\r\n        buttonNode.parent = this.node;\r\n        buttonNode.name = 'Buttons';\r\n        const titleNode = instantiate(miscNode);\r\n        titleNode.parent = this.node;\r\n        titleNode.name = 'Titles';\r\n\r\n        // title\r\n        for (let i = 0; i < 2; i++) {\r\n            const newLabel = instantiate(this.EnableAllCompositeModeButton.getChildByName('Label'));\r\n            newLabel.setPosition(x + (i > 0 ? 50 + width * 2 : 150), y, 0.0);\r\n            newLabel.setScale(0.75, 0.75, 0.75);\r\n            newLabel.parent = titleNode;\r\n            const labelComponent = newLabel.getComponent(Label);\r\n            labelComponent.string = i ? '----------Composite Mode----------' : '----------Single Mode----------';\r\n            labelComponent.color = Color.WHITE;\r\n            labelComponent.overflow = 0;\r\n            this.labelComponentList[this.labelComponentList.length] = labelComponent;\r\n        }\r\n\r\n        y -= height;\r\n        // single\r\n        let currentRow = 0;\r\n        for (let i = 0; i < this.strSingle.length; i++, currentRow++) {\r\n            if (i === this.strSingle.length >> 1) {\r\n                x += width;\r\n                currentRow = 0;\r\n            }\r\n            const newNode = i ? instantiate(this.singleModeToggle) : this.singleModeToggle;\r\n            newNode.setPosition(x, y - height * currentRow, 0.0);\r\n            newNode.setScale(0.5, 0.5, 0.5);\r\n            newNode.parent = this.singleModeToggle.parent;\r\n\r\n            const textComponent = newNode.getComponentInChildren(RichText);\r\n            textComponent.string = this.strSingle[i];\r\n            this.textComponentList[this.textComponentList.length] = textComponent;\r\n            this.textContentList[this.textContentList.length] = textComponent.string;\r\n\r\n            newNode.on(Toggle.EventType.TOGGLE, this.toggleSingleMode, this);\r\n\r\n            this.singleModeToggleList[i] = newNode;\r\n        }\r\n\r\n        x += width;\r\n        // buttons\r\n        this.EnableAllCompositeModeButton.setPosition(x + 15, y, 0.0);\r\n        this.EnableAllCompositeModeButton.setScale(0.5, 0.5, 0.5);\r\n        this.EnableAllCompositeModeButton.on(Button.EventType.CLICK, this.enableAllCompositeMode, this);\r\n        this.EnableAllCompositeModeButton.parent = buttonNode;\r\n        let labelComponent = this.EnableAllCompositeModeButton.getComponentInChildren(Label);\r\n        this.labelComponentList[this.labelComponentList.length] = labelComponent;\r\n\r\n        const changeColorButton = instantiate(this.EnableAllCompositeModeButton);\r\n        changeColorButton.setPosition(x + 90, y, 0.0);\r\n        changeColorButton.setScale(0.5, 0.5, 0.5);\r\n        changeColorButton.on(Button.EventType.CLICK, this.changeTextColor, this);\r\n        changeColorButton.parent = buttonNode;\r\n        labelComponent = changeColorButton.getComponentInChildren(Label);\r\n        labelComponent.string = 'TextColor';\r\n        this.labelComponentList[this.labelComponentList.length] = labelComponent;\r\n\r\n        const HideButton = instantiate(this.EnableAllCompositeModeButton);\r\n        HideButton.setPosition(x + 200, y, 0.0);\r\n        HideButton.setScale(0.5, 0.5, 0.5);\r\n        HideButton.on(Button.EventType.CLICK, this.hideUI, this);\r\n        HideButton.parent = this.node.parent;\r\n        labelComponent = HideButton.getComponentInChildren(Label);\r\n        labelComponent.string = 'Hide UI';\r\n        this.labelComponentList[this.labelComponentList.length] = labelComponent;\r\n        this.hideButtonLabel = labelComponent;\r\n\r\n        // misc\r\n        y -= 40;\r\n        for (let i = 0; i < this.strMisc.length; i++) {\r\n            const newNode = instantiate(this.compositeModeToggle);\r\n            newNode.setPosition(x, y - height * i, 0.0);\r\n            newNode.setScale(0.5, 0.5, 0.5);\r\n            newNode.parent = miscNode;\r\n\r\n            const textComponent = newNode.getComponentInChildren(RichText);\r\n            textComponent.string = this.strMisc[i];\r\n            this.textComponentList[this.textComponentList.length] = textComponent;\r\n            this.textContentList[this.textContentList.length] = textComponent.string;\r\n\r\n            const toggleComponent = newNode.getComponent(Toggle);\r\n            toggleComponent.isChecked = i ? true : false;\r\n            newNode.on(Toggle.EventType.TOGGLE, i ? this.toggleLightingWithAlbedo : this.toggleCSMColoration, this);\r\n            this.miscModeToggleList[i] = newNode;\r\n        }\r\n\r\n        // composite\r\n        y -= 150;\r\n        for (let i = 0; i < this.strComposite.length; i++) {\r\n            const newNode = i ? instantiate(this.compositeModeToggle) : this.compositeModeToggle;\r\n            newNode.setPosition(x, y - height * i, 0.0);\r\n            newNode.setScale(0.5, 0.5, 0.5);\r\n            newNode.parent = this.compositeModeToggle.parent;\r\n\r\n            const textComponent = newNode.getComponentInChildren(RichText);\r\n            textComponent.string = this.strComposite[i];\r\n            this.textComponentList[this.textComponentList.length] = textComponent;\r\n            this.textContentList[this.textContentList.length] = textComponent.string;\r\n\r\n            newNode.on(Toggle.EventType.TOGGLE, this.toggleCompositeMode, this);\r\n\r\n            this.compositeModeToggleList[i] = newNode;\r\n        }\r\n    }\r\n\r\n    isTextMatched(textUI, textDescription) : boolean {\r\n        let tempText = new String(textUI);\r\n        const findIndex = tempText.search('>');\r\n        if (findIndex === -1) {\r\n            return textUI === textDescription;\r\n        } else {\r\n            tempText = tempText.substr(findIndex + 1);\r\n            tempText = tempText.substr(0, tempText.search('<'));\r\n            return tempText === textDescription;\r\n        }\r\n    }\r\n    toggleSingleMode(toggle: Toggle) {\r\n        const debugView = director.root!.debugView;\r\n        const textComponent = toggle.getComponentInChildren(RichText);\r\n        for (let i = 0; i < this.strSingle.length; i++) {\r\n            if (this.isTextMatched(textComponent.string, this.strSingle[i])) {\r\n                debugView.singleMode = i;\r\n            }\r\n        }\r\n    }\r\n    toggleCompositeMode(toggle: Toggle) {\r\n        const debugView = director.root!.debugView;\r\n        const textComponent = toggle.getComponentInChildren(RichText);\r\n        for (let i = 0; i < this.strComposite.length; i++) {\r\n            if (this.isTextMatched(textComponent.string, this.strComposite[i])) {\r\n                debugView.enableCompositeMode(i, toggle.isChecked);\r\n            }\r\n        }\r\n    }\r\n    toggleLightingWithAlbedo(toggle: Toggle) {\r\n        const debugView = director.root!.debugView;\r\n        debugView.lightingWithAlbedo = toggle.isChecked;\r\n    }\r\n    toggleCSMColoration(toggle: Toggle) {\r\n        const debugView = director.root!.debugView;\r\n        debugView.csmLayerColoration = toggle.isChecked;\r\n    }\r\n    enableAllCompositeMode(button: Button) {\r\n        const debugView = director.root!.debugView;\r\n        debugView.enableAllCompositeMode(true);\r\n        for (let i = 0; i < this.compositeModeToggleList.length; i++) {\r\n            const toggleComponent = this.compositeModeToggleList[i].getComponent(Toggle);\r\n            toggleComponent.isChecked = true;\r\n        }\r\n\r\n        let toggleComponent = this.miscModeToggleList[0].getComponent(Toggle);\r\n        toggleComponent.isChecked = false;\r\n        debugView.csmLayerColoration = false;\r\n        toggleComponent = this.miscModeToggleList[1].getComponent(Toggle);\r\n        toggleComponent.isChecked = true;\r\n        debugView.lightingWithAlbedo = true;\r\n    }\r\n    hideUI(button: Button) {\r\n        const titleNode = this.node.getChildByName('Titles');\r\n        const activeValue = !titleNode.active;\r\n        this.singleModeToggleList[0].parent.active = activeValue;\r\n        this.miscModeToggleList[0].parent.active = activeValue;\r\n        this.compositeModeToggleList[0].parent.active = activeValue;\r\n        this.EnableAllCompositeModeButton.parent.active = activeValue;\r\n        titleNode.active = activeValue;\r\n        this.hideButtonLabel.string = activeValue ? 'Hide UI' : 'Show UI';\r\n    }\r\n\r\n    private _currentColorIndex = 0;\r\n    private strColor: string[] = [\r\n        '<color=#ffffff>',\r\n        '<color=#000000>',\r\n        '<color=#ff0000>',\r\n        '<color=#00ff00>',\r\n        '<color=#0000ff>',\r\n    ];\r\n    private color: Color[] = [\r\n        Color.WHITE,\r\n        Color.BLACK,\r\n        Color.RED,\r\n        Color.GREEN,\r\n        Color.BLUE,\r\n    ];\r\n    changeTextColor(button: Button) {\r\n        this._currentColorIndex++;\r\n        if (this._currentColorIndex >= this.strColor.length) {\r\n            this._currentColorIndex = 0;\r\n        }\r\n        for (let i = 0; i < this.textComponentList.length; i++) {\r\n            this.textComponentList[i].string = this.strColor[this._currentColorIndex] + this.textContentList[i] + '</color>';\r\n        }\r\n        for (let i = 0; i < this.labelComponentList.length; i++) {\r\n            this.labelComponentList[i].color = this.color[this._currentColorIndex];\r\n        }\r\n    }\r\n\r\n    onLoad() {\r\n    }\r\n    update(deltaTime: number) {\r\n    }\r\n}\r\n","import { _decorator, Component, Node, Enum, Color, log } from 'cc';\nimport {BonusIcon} from \"./BonusIcon\";\nimport {BonusType, ColorType} from \"../../../logic/entities/EntityTile\";\nimport {TileRocket} from \"../../../logic/tiles/bonus/TileRocket\";\nimport {TileDisco} from \"../../../logic/tiles/bonus/TileDisco\";\nconst { ccclass, property } = _decorator;\n\nconst Colors = {\n    [ColorType.green]:  '#77be3a',\n    [ColorType.purple]: '#ad3b99',\n    [ColorType.red]:    '#d73550',\n    [ColorType.blue]:   '#1e90df',\n    [ColorType.yellow]: '#dd9f1a'\n};\n\n@ccclass('DiscoIcon')\nexport class DiscoIcon extends BonusIcon {\n    @property({\n        type: Enum(BonusType),\n        visible: false,\n        override: true\n    })\n    type: BonusType = BonusType.disco;\n    tile: TileDisco;\n\n    start() {\n        this.sprite.color = new Color(Colors[this.tile.color]);\n    }\n\n    update(deltaTime: number) {\n\n    }\n}\n\n","import {BlockType, BonusType, ColorType} from \"./EntityTile\";\n\nexport enum CellType {\n    cell,\n    hole\n}\n\nexport interface ICellBase {\n    x: number,\n    y: number\n}\n\nexport interface ICellData extends ICellBase{\n    type: CellType\n}\n\nexport type CellDataAsUnion = keyof typeof CellType | keyof typeof ColorType | keyof typeof BonusType | keyof typeof BlockType\n// export type CellDataAsUnion = CellType | ColorType | BonusType | BlockType;\n","import EnumToArray from \"../utils/EnumToArray\";\nimport {CellType} from \"./EntityCell\";\n\nexport enum ColorType {\n    yellow,\n    red,\n    blue,\n    green,\n    purple\n}\n\nexport enum BlockType {\n    bubble,\n    box\n}\n\nexport enum BonusType {\n    rocket,\n    bomb,\n    disco\n}\n\nexport type TileType = ColorType | BlockType | BonusType;\n\nexport const COLORS = EnumToArray(ColorType);\nexport const BLOCKS = EnumToArray(BlockType);\nexport const BONUSES = EnumToArray(BonusType);\n\nexport const TileTypeToShort = {\n    [ColorType[ColorType.yellow]]:  'y',\n    [ColorType[ColorType.red]]:     'r',\n    [ColorType[ColorType.purple]]:  'p',\n    [ColorType[ColorType.blue]]:    'b',\n    [ColorType[ColorType.green]]:   'g',\n\n    [BonusType[BonusType.rocket]]:  'R',\n    [BonusType[BonusType.bomb]]:    'B',\n    [BonusType[BonusType.disco]]:   'D',\n\n    [CellType[CellType.hole]]:      '_',\n    [CellType[CellType.cell]]:      'e'\n\n};\n\nexport const ShortToTileType = {\n    'y': ColorType[ColorType.yellow],\n    'r': ColorType[ColorType.red],\n    'p': ColorType[ColorType.purple],\n    'b': ColorType[ColorType.blue],\n    'g': ColorType[ColorType.green],\n\n    'R': BonusType[BonusType.rocket],\n    'B': BonusType[BonusType.bomb],\n    'D': BonusType[BonusType.disco],\n\n    '_': CellType[CellType.hole],\n    'e': CellType[CellType.cell]\n};\n","export default function<T>(model: T): string [] {\n    return Object.keys(model)\n        .filter(value => isNaN(Number(value)));\n}\n","import {Events} from \"./Events\";\n\nexport default new Events();\n\n","interface IListener {\n    callback: Function,\n    tag?: any\n}\ntype EventListeners = Map<any, IListener[]>;\n\nexport class Events {\n\n    private _events: EventListeners = new Map<any, IListener[]>();\n\n    constructor() {\n\n    }\n\n    subscribe (event: any, callback: Function, tag?: any) {\n        if (!callback)\n            return;\n        let listener: IListener = {\n            callback: callback,\n            tag: tag\n        };\n        let listeners = this._events.get(event) || [];\n        listeners.push(listener);\n        this._events.set(event, listeners);\n    }\n\n    dispatch (event: any, ...args: any[]) {\n        const listeners = this._events.get(event);\n        if (!listeners)\n            return false;\n        listeners.forEach(listener => listener.callback.apply(null, args));\n    }\n\n    hasEvent(event: any){\n        return this._events.has(event);\n    }\n\n    unsubscribe (event: any, callback: Function) {\n        let listeners = this._events.get(event);\n        if (!listeners) {\n            console.warn(`This event: ${event} does not exist`);\n            return false;\n        }\n        listeners.filter!(listener => (listener && listener.callback !== callback));\n    }\n\n    unsubscribeTag (tag: any) {\n        if (!tag) {\n            console.warn(`This tag: ${tag} is undefined`);\n            return false;\n        }\n        this._events.forEach((listeners, event) => {\n            listeners.filter!(listener => (listener && listener.tag !== tag));\n        });\n    }\n}\n\n","import { StateBase } from './StateBase';\n\ntype MapState = Map<any, StateBase>;\n\n// TODO: добавить transitions или использовать готовый пакет\nexport abstract class FSM  {\n    private _states: MapState = new Map<any, StateBase>();\n    private _state: StateBase;\n    private _prevState: StateBase;\n\n    protected constructor() {\n\n    }\n\n    protected addState(ClassState: any, defaultState: boolean = false): StateBase {\n        let state: StateBase = new ClassState();\n        state.id = ClassState.ID;\n        state.context = this;\n        this._states.set(state.id, state);\n        if (defaultState)\n            this.toState(state.id);\n        return state;\n    }\n\n\n    private _enterState(state: StateBase, ...args: any[]) {\n        if (!state)\n            return;\n        console.log(`enter state: ${state.id}`);\n        state?.onEnter.apply(state, ...args);\n    }\n\n    private _exitState(state: StateBase, ...args: any[]) {\n        if (!state)\n            return;\n        console.log(` exit state: ${state.id}`);\n        state?.onExit.apply(state, ...args);\n    }\n\n    private _getState(id: any): StateBase {\n        return this._states.get(id);\n    }\n\n    get state (): StateBase {\n        return this._state;\n    }\n\n    get prevState (): StateBase {\n        return this._prevState;\n    }\n\n    toState(id: any, ...args: any[]) {\n        if (typeof id !== 'string')\n            id = id.ID;\n\n        const state = this._getState(id);\n        if (state) {\n            this._exitState(this._state, args);\n            this._prevState = this._state;\n            this._state = state;\n            this._enterState(this._state, args);\n        }\n    }\n\n}\n\n","import { _decorator, Component, Node, assert } from 'cc';\nimport {LevelsConfig} from \"../LevelsConfig\";\nimport EventManager from \"../../logic/EventManager\";\nimport { GameFieldView } from './GameFieldView';\nimport {GameFieldLogic} from \"../../logic/field/GameFieldLogic\";\nimport {GFStateGameOver} from \"../../logic/field/states/GFStateGameOver\";\nimport {GFStateWin} from \"../../logic/field/states/GFStateWin\";\nimport {WindowManager} from \"../windows/WindowManager\";\nimport {WindowWin} from \"../windows/WindowWin\";\nimport {WindowGameOver} from \"../windows/WindowGameOver\";\nimport {ButtonRetry} from \"../ui/buttons/ButtonRetry\";\nimport {ButtonNext} from \"../ui/buttons/ButtonNext\";\nconst { ccclass, property } = _decorator;\n\n@ccclass('GameController')\nexport class GameController extends Component {\n\n    private static _instance: GameController = null;\n\n    public static get instance(): GameController {\n        assert(this._instance, \"GameController instance is null\");\n        return this._instance;\n    }\n\n    private _level: number = 1;\n    private _gameFieldView: GameFieldView;\n    get gameFieldView(): GameFieldView { return this._gameFieldView };\n    get gameField(): GameFieldLogic { return this._gameFieldView.gameField };\n\n    onLoad() {\n        GameController._instance = this;\n        this._readComponents();\n        this._initField(this._level);\n        this._initListeners();\n    }\n\n    onDestroy() {\n        EventManager.unsubscribeTag(this);\n    }\n\n    private _readComponents() {\n        this._gameFieldView = this.node.getComponentInChildren(GameFieldView);\n    }\n\n    private _initField(level: number) {\n        this._level = level;\n        if (!LevelsConfig.instance.has(this._level))\n            this._level = 1;\n        let fieldData = LevelsConfig.instance.get(this._level);\n        this._gameFieldView.init(fieldData);\n    }\n\n    private _initListeners() {\n        EventManager.subscribe(GFStateWin.ID, this._onStateWin.bind(this), this);\n        EventManager.subscribe(GFStateGameOver.ID, this._onStateGameOver.bind(this), this);\n        EventManager.subscribe(ButtonRetry.ID, this._onRetry.bind(this), this);\n        EventManager.subscribe(ButtonNext.ID, this._onNext.bind(this), this);\n    }\n\n    private _onStateWin() {\n        WindowManager.instance.open(WindowWin);\n    }\n\n    private _onStateGameOver() {\n        WindowManager.instance.open(WindowGameOver);\n    }\n\n    private _onRetry() {\n        this._initField(this._level);\n    }\n\n    private _onNext() {\n        this._initField(this._level + 1);\n    }\n\n}\n\n","import { _decorator, Component, Node, instantiate, UITransform, Prefab, Vec2, Size, size, v2 } from 'cc';\nimport {GameFieldLogic} from \"../../logic/field/GameFieldLogic\";\nimport {CellBack} from \"../cell/CellBack\";\nconst { ccclass, property, requireComponent } = _decorator;\n\n@ccclass('GameFieldBack')\n@requireComponent(UITransform)\nexport class GameFieldBack extends Component {\n\n    @property(Prefab)\n    prefabCellBack: Prefab;\n\n    // TODO: size можно читать напрямую с префаба\n    @property(Size)\n    cellSize: Size = size(100, 100);\n\n    private _gameField: GameFieldLogic;\n    private _transform: UITransform;\n    private _offset: Vec2 = Vec2.ZERO;\n\n    init(gameField: GameFieldLogic) {\n        this._gameField = gameField;\n        this._transform = this.getComponent(UITransform);\n        this._offset = this._getOffset();\n        this._createBacks();\n    }\n\n    private _getOffset(): Vec2 {\n        const transform = this.getComponent(UITransform);\n        return v2(\n            -this._gameField.columnCount / 2 * this.cellSize.width,\n            transform.height - this.cellSize.height * 0.5\n        );\n    }\n\n    private _createBacks() {\n        this.node.removeAllChildren();\n        for(let x = 0; x < this._gameField.columnCount + 1; x++) {\n            for(let y = 0; y < this._gameField.rowCount + 1; y++) {\n                this._createCell(x, y);\n            }\n        }\n    }\n\n    private _createCell(x: number, y: number): CellBack {\n        let node = instantiate(this.prefabCellBack);\n        node.setParent(this.node);\n        node.setSiblingIndex(0);\n        this._cellInitPosition(node, x, y);\n\n        let cellBack = node.getComponent(CellBack);\n        cellBack.init(x, y, this._gameField);\n        return cellBack;\n    }\n\n    private _cellInitPosition (node: Node, x: number, y: number) {\n        node.setPosition(x * this.cellSize.width + this._offset.x, - y * this.cellSize.height + this._offset.y);\n    }\n}\n\n","import {GameFieldData} from \"./GameFieldData\";\nimport {ColumnData, IGameFieldData} from \"../entities/EntityGame\";\nimport {Cell} from \"../cell/Cell\";\nimport {Column, ColumnCallback} from \"./Column\";\nimport { CellCallback } from \"../cell/CellTiles\";\nimport {Tile, TilesHit} from \"../tiles/Tile\";\n\nexport class GameFieldCells extends  GameFieldData {\n\n    private _columns: Column[];\n\n    constructor(gameFieldData: IGameFieldData) {\n        super(gameFieldData);\n\n        this._parse();\n    }\n\n    get columns(): Column[] {\n        return this._columns;\n    }\n\n    getCell(x: number, y: number): Cell {\n        return this._columns[x]?.getCell(y);\n    }\n\n    getColumn(columnIndex: number): Column {\n        return this._columns[columnIndex];\n    }\n\n    eachColumn(callback: ColumnCallback) {\n        if(!callback)\n            return;\n        this._columns.forEach(column => callback(column));\n    }\n\n    eachCell(callback: CellCallback) {\n        if(!callback)\n            return;\n        this.eachColumn(column => column.eachCell(callback));\n    }\n\n    hitCell(x: number, y: number): TilesHit {\n        let cell = this.getCell(x, y);\n        if(cell?.canHit)\n            return cell.hit();\n        return [];\n    }\n\n    private _parse () {\n        this._columns = [];\n\n        this.gameData.field.forEach((columnData, x) => {\n            let column = this._createColumn(x, columnData);\n            this._columns.push(column);\n        });\n    }\n\n    private _createColumn(x: number, columnData: ColumnData): Column {\n        return new Column(this, x, columnData);\n    }\n\n    getMatrixIds() {\n        let matrix = [];\n        for(let y = 0; y < this.rowCount; y++) {\n            let row = [];\n            for (let x = 0; x < this.columnCount; x++) {\n                row.push(this.getCell(x, y).toString());\n            }\n            matrix.push(row);\n        }\n        return matrix;\n    }\n\n}\n\n","import {IGameFieldData} from \"../entities/EntityGame\";\nimport { assert } from \"chai\";\nimport { GameFieldFSM } from \"./GameFieldFSM\";\n\nexport class GameFieldData extends GameFieldFSM {\n    readonly columnCount: number;\n    readonly rowCount: number;\n    readonly gameData: IGameFieldData;\n\n    constructor(gameData: IGameFieldData) {\n        super();\n        GameFieldData.validate(gameData);\n\n        this.gameData = {} as IGameFieldData;\n        Object.assign(this.gameData, gameData);\n        this.gameData.field = this.gameData.field[0].map((col, colIndex) => this.gameData.field.map(row => row[colIndex]));\n        this.columnCount = this.gameData.field.length;\n        this.rowCount = this.gameData.field[0].length;\n    }\n\n    static validate(gameData: IGameFieldData) {\n        assert(gameData.field.length > 0, 'game data rowCount are cell');\n        const columns = gameData.field[0].length;\n        assert(columns > 0, 'columns are cell');\n        const rowError = gameData.field.find((row) => { return row.length !== columns; });\n        assert(!rowError, 'rowCount length are not equal');\n    }\n}\n\n","import {GFStateIdle} from \"./states/GFStateIdle\";\nimport {GFStateClick} from \"./states/GFStateClick\";\nimport {FSM} from \"../fsm/FSM\";\nimport {GFStateGroups} from \"./states/GFStateGroups\";\nimport {GFStateHit} from \"./states/GFStateHit\";\nimport {GFStateMerge} from \"./states/GFStateMerge\";\nimport {GFStateDrop} from \"./states/GFStateDrop\";\nimport {GFStateSequenceHit} from \"./states/GFStateSequenceHit\";\nimport { GFStateShuffle } from \"./states/GFStateShuffle\";\nimport {GFStateGameOver} from \"./states/GFStateGameOver\";\nimport {GFStateWin} from \"./states/GFStateWin\";\nimport {GFStateCheckGame} from \"./states/GFStateCheckGame\";\nimport { GFStateInit } from \"./states/GFStateInit\";\n\nexport class GameFieldFSM extends FSM {\n\n    constructor() {\n        super();\n    }\n\n    protected initFsm() {\n        this._initStates();\n    }\n\n    private _initStates() {\n        this.addState(GFStateInit);\n        this.addState(GFStateIdle);\n        this.addState(GFStateGroups);\n        this.addState(GFStateClick);\n        this.addState(GFStateHit);\n        this.addState(GFStateMerge);\n        this.addState(GFStateDrop);\n        this.addState(GFStateShuffle);\n        this.addState(GFStateSequenceHit);\n        this.addState(GFStateGameOver);\n        this.addState(GFStateWin);\n        this.addState(GFStateCheckGame);\n    }\n\n}\n\n","import { _decorator, Component, Node, instantiate, UITransform, Prefab, Vec2, Size, size, v2, log, Vec3, v3 } from 'cc';\nimport {IGameFieldData} from \"../../logic/entities/EntityGame\";\nimport {GameFieldLogic} from \"../../logic/field/GameFieldLogic\";\nimport {Cell} from \"../../logic/cell/Cell\";\nimport { GameFieldBack } from './GameFieldBack';\nimport {ViewCell, ViewCellEvent} from '../cell/ViewCell';\nimport EventManager from \"../../logic/EventManager\";\nconst { ccclass, property } = _decorator;\n\n\nexport type ViewCellCallback = (cell: ViewCell) => void;\n\n@ccclass('GameFieldIcons')\nexport class GameFieldIcons extends Component {\n\n    @property(Prefab)\n    prefabCell: Prefab;\n\n    @property(GameFieldBack)\n    background: GameFieldBack;\n\n    @property(Node)\n    cellsNode: Node;\n\n    // TODO: size можно читать напрямую с префаба\n    @property(Size)\n    cellSize: Size = size(100, 100);\n\n    protected _gameField: GameFieldLogic;\n    protected _offset: Vec2 = Vec2.ZERO;\n    protected _cells: ViewCell[][] = [];\n\n    get gameField(): GameFieldLogic { return this._gameField };\n\n    init(filedData: IGameFieldData) {\n        this._gameField = new GameFieldLogic(filedData);\n        this.background?.init(this._gameField);\n        this._offset = this._getOffset();\n        this._createTiles();\n    }\n\n    onDestroy() {\n        EventManager.unsubscribeTag(this);\n    }\n\n    private _getOffset(): Vec2 {\n        const transform = this.cellsNode.getComponent(UITransform);\n        return v2(\n            -this._gameField.columnCount / 2 * this.cellSize.width + this.cellSize.width * 0.5,\n            transform.height - this.cellSize.height\n        );\n    }\n\n    private _clearCells() {\n        this.eachCell(viewCell => viewCell.destroy());\n        this.cellsNode.removeAllChildren();\n        this._cells = [];\n    }\n\n    private _createTiles() {\n        this._clearCells();\n        this._gameField.columns.forEach((column) => {\n            let viewColumn: ViewCell[] = [];\n            column.cells.forEach((cell) => {\n                viewColumn.push(this._createCell(cell));\n            });\n            this._cells.push(viewColumn);\n        });\n    }\n\n    private _createCell(cell: Cell): ViewCell {\n        let node = instantiate(this.prefabCell);\n        const transform = node.getComponent(UITransform);\n        node.setParent(this.cellsNode);\n        node.setSiblingIndex(0);\n        this._cellInitPosition(node, cell.x, cell.y);\n\n        let viewCell = node.getComponent(ViewCell);\n        viewCell.init(this, cell);\n        return viewCell;\n    }\n\n    private _cellInitPosition (node: Node, x: number, y: number) {\n        node.setPosition(this.getCellPosition(x, y));\n    }\n\n    getCellPosition (x: number, y: number): Vec3 {\n        return v3(x * this.cellSize.width + this._offset.x, - y * this.cellSize.height + this._offset.y, 0);\n    }\n\n    getColumn(x: number): ViewCell[] | undefined {\n        return this._cells[x];\n    }\n\n    getCell(x: number, y: number): ViewCell | undefined {\n        let column = this.getColumn(x);\n        if (!column)\n            return;\n        return column[y];\n    }\n\n    eachCell(callback: ViewCellCallback) {\n        if (!callback)\n            return;\n        this._cells.forEach((viewColumn)=> {\n            viewColumn.forEach((viewCell)=>{\n                callback(viewCell);\n            })\n        });\n    }\n\n\n    protected _getStartColumnWorldCoordinate(x: number): Vec2 | undefined {\n        const column = this._gameField.columns[x];\n        if(!column)\n            return;\n        const topCell = column.topCell;\n        if (!topCell)\n            return;\n\n        const topViewCell = this.getCell(x, topCell.y);\n        let worldPos = topViewCell.node.worldPosition;\n        return v2(worldPos.x, worldPos.y + this.cellSize.height * 0.5);\n    }\n}\n\n","import {IGameFieldData} from \"../entities/EntityGame\";\nimport {CellGroup} from \"../tiles/CellGroup\";\nimport { GameFieldCells } from \"./GameFieldCells\";\nimport {Group} from \"../tiles/Group\";\nimport {Cell} from \"../cell/Cell\";\nimport {GFStateClick} from \"./states/GFStateClick\";\nimport {GFStateIdle} from \"./states/GFStateIdle\";\nimport {Events} from \"../Events\";\nimport {GFStateGroups} from \"./states/GFStateGroups\";\nimport {Tile, TilesHit} from \"../tiles/Tile\";\nimport BoosterController, {BoosterControllerEvent} from \"../boosters/BoosterController\";\nimport {Booster} from \"../boosters/Booster\";\nimport EventManager from \"../EventManager\";\nimport {GFStateHit} from \"./states/GFStateHit\";\nimport {GFStateMerge} from \"./states/GFStateMerge\";\nimport {GFStateInit} from \"./states/GFStateInit\";\n\nexport enum GameFieldEvent {\n    pointsChanged= 'pointsChanged',\n    stepsChanged= 'stepsChanged'\n}\n\nexport class GameFieldLogic extends GameFieldCells {\n\n    // TODO:  один функционал - можно вынести в отдельный \"класс-счетчик\"\n    private _points: number = 0;\n    get points(): number { return this._points;  }\n    set points(value: number) {\n        this._points = Math.min(value, this.gameData.points);\n        EventManager.dispatch(GameFieldEvent.pointsChanged, this._points, this.gameData.points);\n    }\n\n    private _steps: number;\n    get steps(): number { return this._steps;  }\n    set steps(value: number) {\n        this._steps = value;\n        EventManager.dispatch(GameFieldEvent.stepsChanged, this._steps);\n    }\n\n    private _selectedBooster: Booster;\n    sequenceHitTiles: Tile[] = [];\n\n    constructor(gameFieldData: IGameFieldData) {\n        super(gameFieldData);\n        this.initFsm();\n        this._initGoals();\n        this._initListeners();\n        this.toState(GFStateInit);\n    }\n\n    private _initGoals() {\n        this.steps = this.gameData.steps;\n        this.points = 0;\n    }\n\n    click(cell: Cell) {\n        if(this.state.id === GFStateIdle.ID) {\n            if (this._selectedBooster)\n                this._applySelectedBooster(cell);\n            else\n                this.toState(GFStateClick, cell);\n        }\n    }\n\n    private _initListeners() {\n        EventManager.subscribe(GFStateHit.ID, this._onStateHit.bind(this), this);\n        EventManager.subscribe(GFStateMerge.ID, this._onStateMerge.bind(this), this);\n\n        BoosterController.subscribe(BoosterControllerEvent.active, this._activeBooster.bind(this), this);\n        BoosterController.subscribe(BoosterControllerEvent.selected, this._onSelectBooster.bind(this), this);\n        BoosterController.subscribe(BoosterControllerEvent.unselected, this._onUnselectBooster.bind(this), this);\n    }\n\n    private _onStateHit(tilesHit: TilesHit) {\n        tilesHit.forEach((tiles)=> {\n            this.points += tiles.length;\n        });\n    }\n\n\n\n    private _onStateMerge(cell: Cell, tiles: Tile[]) {\n        this.points += tiles.length;\n    }\n\n    private _applySelectedBooster(cell: Cell) {\n        if(this._selectedBooster) {\n            this._selectedBooster.apply(this, cell);\n            this._onUnselectBooster();\n        }\n    }\n\n    private _activeBooster(booster: Booster) {\n        if(this.state.id === GFStateIdle.ID)\n            booster.apply(this);\n    }\n\n    private _onSelectBooster(booster: Booster) {\n        this._selectedBooster = booster;\n    }\n\n    private _onUnselectBooster() {\n        this._selectedBooster = undefined\n    }\n\n}\n\n","import { _decorator, Component, Node, instantiate, UITransform, Prefab, Vec2, Size, size, v2, log, Vec3, v3 } from 'cc';\nimport {Cell} from \"../../logic/cell/Cell\";\nimport {ViewCell, ViewCellEvent} from '../cell/ViewCell';\nimport EventManager from \"../../logic/EventManager\";\nimport {GFStateClick} from \"../../logic/field/states/GFStateClick\";\nimport {GFStateHit} from \"../../logic/field/states/GFStateHit\";\nimport {Tile, TilesHit} from \"../../logic/tiles/Tile\";\nimport {GFStateIdle} from \"../../logic/field/states/GFStateIdle\";\nimport {GFStateGroups} from \"../../logic/field/states/GFStateGroups\";\nimport {Icon} from \"../tiles/Icon\";\nimport {GFStateDrop} from \"../../logic/field/states/GFStateDrop\";\nimport {GFStateMerge} from \"../../logic/field/states/GFStateMerge\";\nimport {Column, ColumnEvent} from \"../../logic/field/Column\";\nimport {GameFieldIcons} from \"./GameFieldIcons\";\nimport {GFStateShuffle} from \"../../logic/field/states/GFStateShuffle\";\nimport {GFStateInit} from \"../../logic/field/states/GFStateInit\";\nimport {IGameFieldData} from \"../../logic/entities/EntityGame\";\nimport {GameFieldLogic} from \"../../logic/field/GameFieldLogic\";\nconst { ccclass, property } = _decorator;\n\n\nexport type ViewCellCallback = (cell: ViewCell) => void;\n\n@ccclass('GameFieldView')\nexport class GameFieldView extends GameFieldIcons {\n\n    onLoad() {\n        this._initListeners();\n        this.gameField.state.next();\n    }\n\n    init(filedData: IGameFieldData) {\n        super.init(filedData);\n        this.gameField.state.next();\n    }\n\n    onDestroy() {\n        super.onDestroy();\n        EventManager.unsubscribeTag(this);\n    }\n\n    private _initListeners() {\n        EventManager.unsubscribeTag(this);\n        EventManager.subscribe(ViewCellEvent.click, this._onCellClick.bind(this), this);\n        EventManager.subscribe(ColumnEvent.fill, this._onColumnFill.bind(this), this);\n\n        EventManager.subscribe(GFStateInit.ID, this._onStateInit.bind(this), this);\n        EventManager.subscribe(GFStateGroups.ID, this._onStateGroups.bind(this), this);\n        EventManager.subscribe(GFStateIdle.ID, this._onStateIdle.bind(this), this);\n        EventManager.subscribe(GFStateClick.ID, this._onStateClick.bind(this), this);\n\n        EventManager.subscribe(GFStateHit.ID, this._onStateHit.bind(this), this);\n        EventManager.subscribe(GFStateMerge.ID, this._onStateMerge.bind(this), this);\n        EventManager.subscribe(GFStateDrop.ID, this._onStateDrop.bind(this), this);\n        EventManager.subscribe(GFStateShuffle.ID, this._onStateShuffle.bind(this), this);\n    }\n\n    private _onColumnFill(column: Column, cells: Cell[]) {\n        let startPos = this._getStartColumnWorldCoordinate(column.x);\n        cells.forEach((cell, i) => {\n            let viewCell = this.getCell(cell.x, cell.y);\n            if(!viewCell)\n                return;\n            let icon = viewCell.icon;\n            if (icon)\n                icon.node.setWorldPosition(startPos.x, startPos.y + (cells.length - i) * this.cellSize.height, 0);\n        });\n    }\n\n    private _onStateInit() {\n\n    }\n\n    private _onStateGroups() {\n        // TODO: индикация резулттата объединения на тайлах\n        this._gameField.state.next();\n    }\n\n    private _onStateIdle() {\n\n    }\n\n\n    private _onCellClick(viewCell: ViewCell) {\n        this._gameField.click(viewCell.cell);\n    }\n\n    private _onStateClick() {\n\n    }\n\n    private _onStateHit(tilesHit: TilesHit) {\n        let promises = [];\n        let delay = 0;\n        tilesHit.forEach((tiles)=> {\n            tiles.forEach((tile)=> {\n                let viewCell = this.getCell(tile.x, tile.y);\n                let icon = viewCell.icon;\n                let promise = new Promise(resolve => setTimeout(() => {\n                    icon.tile.destroy();\n                    resolve();\n                }, delay * 1000));\n                promises.push(promise);\n            });\n            delay += 0.025;\n        });\n        log('wait hit...');\n        Promise.all(promises).then(()=> {\n            this._gameField.state.next();\n        } );\n    }\n\n\n    private _onStateMerge(cell: Cell, tiles: Tile[]) {\n        let promises = [];\n        let viewCellTarget = this.getCell(cell.x, cell.y);\n        tiles.forEach((tile)=> {\n            let viewCell = this.getCell(tile.x, tile.y);\n            let icon = viewCell.icon;\n            promises.push(icon.flyTo(viewCellTarget.node));\n        });\n        log('wait merging...');\n        Promise.all(promises).then(()=> {\n            this._gameField.state.next();\n        } );\n    }\n\n\n    private _onStateDrop() {\n        let promises = [];\n        this._cells.forEach((viewColumn)=> {\n            let delay = 0;\n            for(let y = viewColumn.length - 1; y >= 0; y--) {\n                let viewCell = viewColumn[y];\n                if(viewCell.cell.isHole)\n                    delay += this.cellSize.height / Icon.DROP_SPEED;\n                else\n                    promises.push(viewCell.drop(delay));\n\n                delay += Icon.DROP_DELAY;\n            }\n        });\n        log('wait dropping...');\n        Promise.all(promises).then(()=> {\n            this._gameField.state.next();\n        } );\n    }\n\n\n    private _onStateShuffle() {\n        let promises = [];\n        this._cells.forEach((viewColumn)=> {\n            for(let y = viewColumn.length - 1; y >= 0; y--) {\n                let viewCell = viewColumn[y];\n                let icon = viewCell.icon;\n                if (icon)\n                    promises.push(icon.flyToHome());\n            }\n        });\n        log('wait shuffle...');\n        Promise.all(promises).then(()=> {\n            this._gameField.state.next();\n        } );\n    }\n\n\n}\n\n","import { _decorator, Component, Node, director, assert } from 'cc';\nconst { ccclass, property } = _decorator;\n\n@ccclass('GameLauncher')\nexport class GameLauncher extends Component {\n    private static _instance: GameLauncher = null;\n\n    public static get instance(): GameLauncher {\n        assert(this._instance, \"GameLauncher instance is null\");\n        return this._instance;\n    }\n\n    onLoad() {\n        director.addPersistRootNode(this.node);\n        assert(!GameLauncher._instance, \"Only one instance allowed\");\n        GameLauncher._instance = this;\n    }\n}\n\n","import {StateBase} from \"../../fsm/StateBase\";\nimport {GameFieldLogic} from \"../GameFieldLogic\";\n\nexport abstract class GFState extends StateBase {\n    context: GameFieldLogic;\n}\n","import {GFState} from \"./GFState\";\nimport {GFStateGroups} from \"./GFStateGroups\";\nimport {GFStateWin} from \"./GFStateWin\";\nimport {GFStateGameOver} from \"./GFStateGameOver\";\n\nexport class GFStateCheckGame extends GFState {\n    static ID = 'GFStateCheckGame';\n\n    onEnter() {\n        if (this.context.points >= this.context.gameData.points)\n            this.context.toState(GFStateWin);\n        else if (this.context.steps > 0)\n            this.context.toState(GFStateGroups);\n        else\n            this.context.toState(GFStateGameOver);\n    }\n\n    next() {\n    }\n\n    onExit() {\n\n    }\n}\n","import {GFState} from \"./GFState\";\nimport { Cell } from \"../../cell/Cell\";\nimport {GFStateIdle} from \"./GFStateIdle\";\nimport EventManager from \"../../EventManager\";\nimport {GFStateHit} from \"./GFStateHit\";\nimport {GFStateMerge} from \"./GFStateMerge\";\n\nexport class GFStateClick extends GFState {\n    static ID = 'GFStateClick';\n\n    onEnter(cell: Cell) {\n        EventManager.dispatch(this.id);\n        this.next(cell);\n    }\n\n    next(cell: Cell) {\n        if (cell.canHit && cell.group) {\n            if(cell.group.canMerge) {\n                this.context.steps--;\n                this.context.toState(GFStateMerge, cell);\n            }\n            else if (cell.group.canHit) {\n                this.context.steps--;\n                this.context.toState(GFStateHit, cell);\n            }\n            else\n                this.context.toState(GFStateIdle);\n        }\n        else {\n            this.context.toState(GFStateIdle);\n        }\n    }\n\n    onExit() {\n\n    }\n}\n","import {GFState} from \"./GFState\";\nimport EventManager from \"../../EventManager\";\nimport {GFStateSequenceHit} from \"./GFStateSequenceHit\";\n\nexport class GFStateDrop extends GFState {\n    static ID = 'GFStateDrop';\n\n    onEnter() {\n        this.context.eachColumn(column => column.drop());\n        this.context.eachColumn(column => column.fill());\n\n        EventManager.dispatch(this.id);\n    }\n\n    next() {\n        this.context.toState(GFStateSequenceHit);\n    }\n\n    onExit() {\n\n    }\n}\n","import {GFState} from \"./GFState\";\nimport EventManager from \"../../EventManager\";\n\nexport class GFStateGameOver extends GFState {\n    static ID = 'GFStateGameOver';\n\n    onEnter() {\n\n        EventManager.dispatch(this.id);\n    }\n\n    next() {\n        // this.context.toState(GFStateGroups);\n    }\n\n    onExit() {\n\n    }\n}\n","import { GFState } from \"./GFState\";\nimport {GFStateIdle} from \"./GFStateIdle\";\nimport EventManager from \"../../EventManager\";\nimport {GFStateShuffle} from \"./GFStateShuffle\";\nimport {GFStateGameOver} from \"./GFStateGameOver\";\nimport {CellGroup} from \"../../tiles/CellGroup\";\nimport {Cell} from \"../../cell/Cell\";\nimport {Group} from \"../../tiles/Group\";\n\nexport class GFStateGroups extends GFState {\n    static ID = 'GFStateGroups';\n\n    private _groups: CellGroup[];\n    onEnter() {\n        this._searchGroups();\n        EventManager.dispatch(this.id);\n    }\n\n    private _searchGroups () {\n        this._clearGroups();\n        this.context.eachCell((cell: Cell) => {\n            let group = Group.create(cell);\n            if (group) {\n                this._groups.push(group);\n                console.log(group);\n            }\n        })\n    }\n\n    private _clearGroups () {\n        this.context.eachCell((cell: Cell) => {\n            cell.resetGroup();\n        });\n        this._groups = [];\n    }\n\n    next() {\n        if (this._groups.length > 0)\n            this.context.toState(GFStateIdle);\n        else if (this.context.prevState.id !== GFStateShuffle.ID)\n            this.context.toState(GFStateShuffle);\n        else\n            this.context.toState(GFStateGameOver);\n    }\n\n    onExit() {\n\n    }\n}\n","import {GFState} from \"./GFState\";\nimport { Cell } from \"../../cell/Cell\";\nimport EventManager from \"../../EventManager\";\nimport {GFStateDrop} from \"./GFStateDrop\";\nimport {Tile, TilesHit} from \"../../tiles/Tile\";\n\nexport class GFStateHit extends GFState {\n    static ID = 'GFStateHit';\n\n    hitTiles: TilesHit = [];\n\n    onEnter(cell: Cell) {\n        if (cell.group)\n            this.hitTiles = cell.group.hit(cell);\n        else if(cell.canHit)\n            this.hitTiles = cell.hit();\n\n        console.log(this.hitTiles);\n        EventManager.dispatch(this.id, this.hitTiles);\n    }\n\n    next(cell: Cell) {\n        this.context.toState(GFStateDrop.ID);\n    }\n\n    onExit() {\n\n    }\n}\n","import { GFState } from \"./GFState\";\nimport EventManager from \"../../EventManager\";\n\nexport class GFStateIdle extends GFState {\n    static ID = 'GFStateIdle';\n\n    onEnter() {\n        EventManager.dispatch(this.id);\n    }\n\n    next() {\n\n    }\n\n    onExit() {\n\n    }\n}\n","import {GFState} from \"./GFState\";\nimport EventManager from \"../../EventManager\";\nimport {GFStateGroups} from \"./GFStateGroups\";\n\nexport class GFStateInit extends GFState {\n    static ID = 'GFStateInit';\n\n    onEnter() {\n        EventManager.dispatch(this.id);\n    }\n\n    next() {\n        this.context.toState(GFStateGroups);\n    }\n\n    onExit() {\n\n    }\n}\n","import {GFState} from \"./GFState\";\nimport { Cell } from \"../../cell/Cell\";\nimport EventManager from \"../../EventManager\";\nimport {GFStateDrop} from \"./GFStateDrop\";\nimport {Tile} from \"../../tiles/Tile\";\nimport {BonusGroup} from \"../../tiles/BonusGroup\";\nimport {GFStateSequenceHit} from \"./GFStateSequenceHit\";\n\nexport class GFStateMerge extends GFState {\n    static ID = 'GFStateMerge';\n\n    tiles: Tile[] = [];\n    cell: Cell;\n    newTiles: Tile[] = [];\n\n    isBonusGroup: boolean = false;\n\n    onEnter(cell: Cell) {\n        this.cell = cell;\n        this.tiles = cell.group.tiles;\n        this.isBonusGroup = (this.cell.group instanceof BonusGroup);\n\n        EventManager.dispatch(this.id, this.cell, this.tiles);\n    }\n\n    next() {\n        this.newTiles = this.cell.group.merge(this.cell);\n        this.tiles.forEach(tile => {\n            tile.destroy();\n        });\n\n        if (this.isBonusGroup) {\n            this.context.sequenceHitTiles = this.newTiles;\n            this.context.toState(GFStateSequenceHit);\n        }\n        else\n            this.context.toState(GFStateDrop);\n    }\n\n    onExit() {\n\n    }\n}\n","import {GFState} from \"./GFState\";\nimport { GFStateHit } from \"./GFStateHit\";\nimport {GFStateCheckGame} from \"./GFStateCheckGame\";\n\nexport class GFStateSequenceHit extends GFState {\n    static ID = 'GFStateSequenceHit';\n\n    onEnter() {\n        while (this.context.sequenceHitTiles.length > 0) {\n            let tile = this.context.sequenceHitTiles.pop();\n            if (tile && tile.isAlive) {\n                this.context.toState(GFStateHit, tile.cell);\n                return;\n            }\n        }\n        this.context.toState(GFStateCheckGame);\n    }\n\n    next() {\n\n    }\n\n    onExit() {\n\n    }\n}\n","import {GFState} from \"./GFState\";\nimport { Cell } from \"../../cell/Cell\";\nimport EventManager from \"../../EventManager\";\nimport {Tile} from \"../../tiles/Tile\";\nimport {GFStateGroups} from \"./GFStateGroups\";\n\nexport class GFStateShuffle extends GFState {\n    static ID = 'GFStateShuffle';\n\n    onEnter() {\n        let tiles: Tile[] = [];\n        let cells: Cell[] = [];\n        this.context.eachCell((cell: Cell) => {\n            let tile = cell.tile;\n            if (!tile)\n                return;\n            if (tile.isColor || tile.isBonus) {\n                cells.push(cell);\n                tiles.push(tile);\n            }\n        });\n\n        tiles.sort(() => Math.random() - 0.5);\n        cells.forEach((cell, i) => {\n            let tile = tiles.pop();\n            tile?.rebind(cell);\n        });\n\n        EventManager.dispatch(this.id);\n    }\n\n    next() {\n        this.context.toState(GFStateGroups);\n    }\n\n    onExit() {\n\n    }\n}\n","import {GFState} from \"./GFState\";\nimport EventManager from \"../../EventManager\";\n\nexport class GFStateWin extends GFState {\n    static ID = 'GFStateWin';\n\n    onEnter() {\n\n        EventManager.dispatch(this.id);\n    }\n\n    next() {\n        // this.context.toState(GFStateGroups);\n    }\n\n    onExit() {\n\n    }\n}\n","import { Cell } from \"../cell/Cell\";\nimport { BonusType, ColorType } from \"../entities/EntityTile\";\nimport { CellGroup } from \"./CellGroup\";\nimport { BonusGroup } from \"./BonusGroup\";\n\n\nexport class Group {\n\n    static create(cell: Cell): CellGroup | undefined {\n        if(cell.isHole || cell.isEmpty)\n            return;\n\n        let group: CellGroup;\n        if(cell.tile.typeString in BonusType) {\n            group = new BonusGroup(cell);\n        }\n        else if (cell.tile.typeString in ColorType) {\n            group = new CellGroup(cell);\n        }\n        if (group && group.size > 1)\n            return group;\n    }\n\n}\n","import { _decorator, Component, Node, Sprite, Color, log, tween, Vec3, UITransform } from 'cc';\nimport {IconBase} from \"./IconBase\";\nimport { Cell } from '../../logic/cell/Cell';\nimport {Tile, TileEvent} from '../../logic/tiles/Tile';\nimport {GameFieldIcons} from \"../game/GameFieldIcons\";\nconst { ccclass, property, requireComponent } = _decorator;\n\n@ccclass('Icon')\n@requireComponent(Sprite)\nexport class Icon extends IconBase {\n\n    static DROP_SPEED = 1300;\n    static DROP_DELAY = 0.015;\n\n    gameFiledView: GameFieldIcons;\n    protected sprite: Sprite;\n\n    onLoad() {\n        this.sprite = this.getComponent(Sprite);\n        this.tile.subscribe(TileEvent.hit, this.onTileHit.bind(this), this);\n        this.tile.subscribe(TileEvent.destroy, this.onTileDestroy.bind(this), this);\n        this.tile.subscribe(TileEvent.changeCell, this.onTileChangeCell.bind(this), this);\n    }\n\n    onDestroy() {\n        this.tile.unsubscribeTag(this);\n    }\n\n    alpha(alpha: number) {\n        if(!this.sprite)\n            return;\n        let color = this.sprite.color;\n        this.sprite.color = new Color(color.r, color.g, color.b, 255 * alpha);\n    }\n\n    onTileHit() {\n        // log(this.tile);\n    }\n\n    onTileDestroy() {\n        this.node.removeFromParent();\n    }\n\n    onTileChangeCell(tile: Tile, cellPrev: Cell, cellNew: Cell) {\n        let viewCell = this.gameFiledView.getCell(cellNew.x, cellNew.y);\n        if (viewCell) {\n            const wordPos = this.node.getWorldPosition();\n            this.node.setParent(viewCell.node);\n            this.node.worldPosition = wordPos;\n        }\n    }\n\n    async drop(delay: number = 0): Promise<Icon> {\n        if (this.node.position.y === 0)\n            return this;\n        let tweenDuration: number = this.node.position.y / Icon.DROP_SPEED;\n        if(tweenDuration <= 0) {\n            this.node.position = Vec3.ZERO;\n            return this;\n        }\n        return new Promise(resolve => {\n            tween(this.node)\n                .delay(delay)\n                .to(tweenDuration, { position: Vec3.ZERO }, {\n                    // easing: \"bounceOut\",\n                    easing: \"sineIn\",\n                    onComplete: (target?: object) => {\n                        this.node.position = Vec3.ZERO;\n                        resolve(this);\n                    }\n                })\n                .start();\n        });\n    }\n\n    async flyTo(target: Node, delay: number = 0): Promise<Icon> {\n\n        const transformTarget = target.getComponent(UITransform);\n        let targetWorldPos = transformTarget.convertToWorldSpaceAR(Vec3.ZERO);\n\n        const transform = this.node.getComponent(UITransform);\n        let pos = transform.convertToNodeSpaceAR(targetWorldPos);\n\n        let tweenDuration: number = 0.25;\n        return new Promise(resolve => {\n            tween(this.node)\n                .delay(delay)\n                .to(tweenDuration, { position: pos }, {\n                    easing: \"backIn\",\n                    onComplete: (target?: object) => {\n                        this.node.position = pos;\n                        resolve(this);\n                    }\n                })\n                .start();\n        });\n    }\n\n    async flyToHome(delay: number = 0): Promise<Icon> {\n        const pos = Vec3.ZERO;\n        let tweenDuration: number = 0.8;\n        return new Promise(resolve => {\n            tween(this.node)\n                .delay(delay)\n                .to(tweenDuration, { position: pos }, {\n                    easing: \"backInOut\",\n                    onComplete: (target?: object) => {\n                        this.node.position = pos;\n                        resolve(this);\n                    }\n                })\n                .start();\n        });\n    }\n\n    onClick() {\n\n    }\n\n}\n\n","import { _decorator, Component, Node } from 'cc';\nimport {Tile} from \"../../logic/tiles/Tile\";\nconst { ccclass, property } = _decorator;\n\n@ccclass('IconBase')\nexport class IconBase extends Component {\n\n    tile: Tile;\n\n    start() {\n\n    }\n\n}\n\n","import {_decorator, assert, Component, director, instantiate, Node, Prefab} from 'cc';\nimport {CellDataAsUnion} from \"../../../logic/entities/EntityCell\";\nimport {PrefabTile} from \"./PrefabTile\";\nimport {PrefabColorTile} from \"./PrefabColorTile\";\nimport {PrefabBonusTile} from \"./PrefabBonusTile\";\nimport {PrefabBlockTile} from \"./PrefabBlockTile\";\nimport {BlockType, BonusType, ColorType} from \"../../../logic/entities/EntityTile\";\nimport {Tile} from \"../../../logic/tiles/Tile\";\nimport {Icon} from \"../Icon\";\n\nconst { ccclass, property } = _decorator;\n\ntype PrefabTileMap = Map<CellDataAsUnion, PrefabTile>;\n\n@ccclass('IconFactory')\nexport class IconFactory extends Component {\n\n    @property(PrefabColorTile)\n    colorTiles: PrefabColorTile[] = [];\n\n    @property(PrefabBonusTile)\n    bonusTiles: PrefabBonusTile[] = [];\n\n    @property(PrefabBlockTile)\n    blockTiles: PrefabBlockTile[] = [];\n\n    private _tiles: PrefabTileMap = new Map<CellDataAsUnion, PrefabTile>();\n\n    private static _instance: IconFactory = null;\n    public static get instance(): IconFactory {\n        assert(this._instance, \"IconFactory instance is null\");\n        return this._instance;\n    }\n\n    onLoad() {\n        assert(!IconFactory._instance, \"Only one instance allowed\");\n        IconFactory._instance = this;\n\n        this._init();\n    }\n\n    private _init() {\n        this._regPrefabs(this.colorTiles, ColorType);\n        this._regPrefabs(this.bonusTiles, BonusType);\n        this._regPrefabs(this.blockTiles, BlockType);\n    }\n\n    private _regPrefabs(prefabTiles: PrefabTile[], type: any) {\n        prefabTiles.forEach(prefabTile => this._tiles.set(type[prefabTile.type], prefabTile));\n    }\n\n    create (tile: Tile): Icon {\n        if (!tile)\n            return;\n\n        let node = this._createPrefab(tile.typeString);\n        if (!node)\n            return;\n        let icon = node.getComponent(Icon);\n        icon.tile = tile;\n        return icon;\n    }\n\n    private _createPrefab(type: CellDataAsUnion): Node {\n        const prefabTile = this._tiles.get(type);\n        return instantiate(prefabTile.prefab);\n    }\n\n}\n\n","import { _decorator, Component, Node, Label } from 'cc';\nimport EventManager from \"../../../logic/EventManager\";\nconst { ccclass, property, requireComponent } = _decorator;\n\n@ccclass('LabelEvent')\n@requireComponent(Label)\nexport abstract class LabelEvent extends Component {\n\n    protected label: Label;\n\n    abstract get event(): string;\n    abstract initStartValue();\n\n    start() {\n        this.label = this.getComponent(Label);\n        EventManager.subscribe(this.event, this.setValue.bind(this), this);\n        this.initStartValue();\n    }\n\n    onDestroy() {\n        EventManager.unsubscribeTag(this);\n    }\n\n    protected getValueString(value: number, ...args: any[]): string {\n        return value.toString();\n    }\n\n    setValue(value: number, ...args: any[]) {\n        this.label.string = this.getValueString(value, args);\n    }\n\n}\n\n","import { _decorator, Component, Node } from 'cc';\nimport {LabelEvent} from \"./LabelEvent\";\nimport {GameFieldEvent, GameFieldLogic} from \"../../../logic/field/GameFieldLogic\";\nimport {GameController} from \"../../game/GameController\";\nconst { ccclass, property } = _decorator;\n\n@ccclass('LabelPoints')\nexport class LabelPoints extends LabelEvent {\n\n    get event(): string { return GameFieldEvent.pointsChanged; }\n\n    initStartValue() {\n        this.setValue(GameController.instance.gameField.points, GameController.instance.gameField.gameData.points);\n    }\n\n    protected getValueString(value: number, pointsTarget: number): string {\n        return `${value} / ${pointsTarget}`;\n    }\n\n}\n\n","import { _decorator, Component, Node } from 'cc';\nimport {LabelEvent} from \"./LabelEvent\";\nimport {GameFieldEvent} from \"../../../logic/field/GameFieldLogic\";\nimport {GameController} from \"../../game/GameController\";\nconst { ccclass, property } = _decorator;\n\n@ccclass('LabelSteps')\nexport class LabelSteps extends LabelEvent {\n\n    get event(): string { return GameFieldEvent.stepsChanged; }\n\n    initStartValue() {\n        this.setValue(GameController.instance.gameField.steps);\n    }\n\n}\n\n","import { _decorator, Component, Node, JsonAsset, assert, director } from 'cc';\nimport { IGameFieldData } from \"../logic/entities/EntityGame\";\nconst { ccclass, property } = _decorator;\n\n@ccclass('LevelsConfig')\nexport class LevelsConfig extends Component {\n\n    // TODO: в идеале грузить с сервера\n\n    @property({type: [JsonAsset]})\n    configs: JsonAsset[] = [];\n\n    private static _instance: LevelsConfig = null;\n\n    public static get instance(): LevelsConfig {\n        assert(this._instance, \"LevelsConfig instance is null\");\n        return this._instance;\n    }\n\n    onLoad() {\n        assert(!LevelsConfig._instance, \"Only one instance allowed\");\n        LevelsConfig._instance = this;\n    }\n\n    has(level: number): boolean {\n        return !!this.configs[level - 1];\n    }\n\n    get(level: number): IGameFieldData {\n        const config = this.configs[level - 1];\n        assert(config, 'level config is undefined');\n        return <IGameFieldData> config.json;\n    }\n}\n\n","import { _decorator, Node, Enum } from 'cc';\nimport { PrefabTile } from './PrefabTile';\nimport {BlockType} from '../../../logic/entities/EntityTile';\nconst { ccclass, property } = _decorator;\n\n@ccclass('PrefabBlockTile')\nexport class PrefabBlockTile extends PrefabTile {\n    @property({\n        type: Enum(BlockType),\n        override: true\n    })\n    type: BlockType;\n}\n\n\n","import { _decorator, Component, Node, Enum } from 'cc';\nimport {PrefabTile} from \"./PrefabTile\";\nimport {BonusType} from \"../../../logic/entities/EntityTile\";\nconst { ccclass, property } = _decorator;\n\n@ccclass('PrefabBonusTile')\nexport class PrefabBonusTile extends PrefabTile {\n    @property({\n        type: Enum(BonusType),\n        override: true\n    })\n    type: BonusType;\n}\n\n","import { _decorator, Component, Node, Enum } from 'cc';\nimport {PrefabTile} from \"./PrefabTile\";\nimport {ColorType} from \"../../../logic/entities/EntityTile\";\nconst { ccclass, property } = _decorator;\n\n@ccclass('PrefabColorTile')\nexport class PrefabColorTile extends PrefabTile {\n    @property({\n        type: Enum(ColorType),\n        override: true\n    })\n    type: ColorType;\n}\n\n","import { _decorator, Component, Node, Prefab, Enum } from 'cc';\nimport {TileType} from \"../../../logic/entities/EntityTile\";\nconst { ccclass, property } = _decorator;\n\n@ccclass('PrefabTile')\nexport class PrefabTile {\n\n    @property\n    type: TileType;\n\n    @property(Prefab)\n    prefab: Prefab;\n}\n\n","import { _decorator, Component, Node, Sprite, UITransform, Texture2D } from 'cc';\nconst { ccclass, property, requireComponent} = _decorator;\n\n@ccclass('RenderNode')\n\n@requireComponent(UITransform)\n@requireComponent(Sprite)\nexport class RenderNode extends Component {\n\n    @property(Node)\n    target: Node;\n\n    private _sprite: Sprite;\n    private _transform: UITransform;\n\n\n    start() {\n        this._sprite = this.getComponent(Sprite);\n        this._transform = this.node.getComponent(UITransform);\n\n    }\n\n    update(deltaTime: number) {\n\n    }\n}\n\n","import {_decorator, Enum, v2, v3, Quat, Sprite} from 'cc';\nimport {BonusIcon} from \"./BonusIcon\";\nimport {BonusType} from \"../../../logic/entities/EntityTile\";\nimport {RocketDirection, TileRocket} from \"../../../logic/tiles/bonus/TileRocket\";\n\nconst { ccclass, property } = _decorator;\n\n@ccclass('RocketIcon')\nexport class RocketIcon extends BonusIcon {\n    @property({\n        type: Enum(BonusType),\n        visible: false,\n        override: true\n    })\n    type: BonusType = BonusType.rocket;\n    tile: TileRocket;\n\n    start() {\n        this.sprite = this.getComponentInChildren(Sprite);\n        if (this.tile.direction === RocketDirection.vertical)\n            this.sprite.node.rotate(Quat.fromEuler(new Quat(), 0, 0, 90));\n\n    }\n\n}\n\n","export abstract class StateBase {\n    readonly id: string;\n    abstract context: any;\n\n    abstract onEnter    (...args: any[]): any;\n    abstract next       (...args: any[]): any;\n    abstract onExit     (...args: any[]): any;\n}\n","import {BonusType, ColorType, TileType} from \"../entities/EntityTile\";\nimport {TileBase} from \"./TileBase\";\nimport {CellGroup} from \"./CellGroup\";\nimport {CellTiles} from \"../cell/CellTiles\";\nimport {GameFieldCells} from \"../field/GameFieldCells\";\nimport { Cell } from \"../cell/Cell\";\n\nexport enum TileEvent {\n    hit,\n    destroy,\n    resetCell,\n    setCell,\n    changeCell\n}\n\nexport type TilesHit = Tile[][];\n\nexport class Tile extends  TileBase {\n\n    protected hp: number = 1;\n\n    private _x: number;\n    private _y: number;\n    private _cell: CellTiles;\n    private _gameField: GameFieldCells;\n\n    get x(): number { return this._x; };\n    get y(): number { return this._y; };\n    get cell(): CellTiles { return this._cell; };\n    get gameField(): GameFieldCells { return this._gameField; };\n\n    constructor(type: TileType) {\n        super(type);\n    }\n\n    setGameField(gameField: GameFieldCells) {\n        this._gameField = gameField;\n    }\n\n    setCell(cell: CellTiles) {\n        this._cell = cell;\n        this._x = this._cell.x;\n        this._y = this._cell.y;\n        this.dispatch(TileEvent.setCell, this);\n    }\n\n    resetCell() {\n        this._cell = undefined;\n    }\n\n    hit(): TilesHit {\n        this.hp--;\n        this.dispatch(TileEvent.hit, this);\n        return [[this]];\n    }\n\n    destroy() {\n        this.hp = 0;\n        this.dispatch(TileEvent.destroy, this);\n        this.resetCell();\n    }\n\n    drop() {\n        let column = this._gameField.getColumn(this._x);\n        let cell: CellTiles;\n        for(let y = this._y + 1; y < column.cells.length; y++) {\n            let cellNext = column.cells[y];\n            if (cellNext.isHole)\n                continue;\n            if (cellNext.isEmpty)\n                cell = cellNext;\n            else\n                break;\n        }\n        if (cell) {\n            this.rebind(cell);\n        }\n    }\n\n    rebind(cell: CellTiles) {\n        let prevCell = this._cell;\n        prevCell.remove(this);\n        cell.insert(this);\n        this.dispatch(TileEvent.changeCell, this, prevCell, cell);\n    }\n\n    get isAlive(): boolean {\n        return this.hp > 0;\n    }\n\n    get isBonus(): boolean {\n        return this.typeString in BonusType;\n    }\n\n    get isColor(): boolean {\n        return this.typeString in ColorType;\n    }\n\n    static tilesHitMerge(tilesSrc: TilesHit, tilesDst: TilesHit) {\n        tilesSrc.forEach((valuesSrc, i) => {\n            let valueDst = tilesDst[i];\n            if (!valueDst) {\n                valueDst = [];\n                tilesDst.push(valueDst);\n            }\n            valueDst.push(...valuesSrc);\n        })\n    }\n}\n","import { TileType } from \"../entities/EntityTile\";\nimport { CellDataAsUnion } from \"../entities/EntityCell\";\nimport {Events} from \"../Events\";\n\nexport abstract class TileBase extends Events {\n    readonly type: TileType;\n\n    protected constructor(type: TileType) {\n        super();\n        this.type = type;\n    }\n\n    get typeString(): CellDataAsUnion { return; };\n}\n","import {BlockType, } from \"../../entities/EntityTile\";\nimport { Tile } from \"../Tile\";\nimport {CellDataAsUnion} from \"../../entities/EntityCell\";\n\nexport class TileBlock extends  Tile {\n\n    constructor(type: BlockType) {\n        super(type);\n    }\n\n    get typeString(): CellDataAsUnion { return BlockType[this.type] as CellDataAsUnion };\n}\n","import {BonusType} from \"../../entities/EntityTile\";\nimport { TileBonus } from \"./TileBonus\";\nimport {Tile, TilesHit} from \"../Tile\";\nimport {RocketDirection} from \"./TileRocket\";\n\nexport class TileBomb extends  TileBonus {\n\n    radius: number = 1;\n    constructor() {\n        super(BonusType.bomb);\n    }\n\n\n    hit(): TilesHit {\n        let tiles = super.hit();\n\n        for (let r = 1; r <= this.radius; r++) {\n            let tilesHit = this._hitRadius(r);\n            tiles.push(...tilesHit);\n        }\n        return tiles;\n    }\n\n    private _hitRadius(radius: number = 1): TilesHit {\n        let tiles: TilesHit = [];\n\n        const xStart    = this.x - radius;\n        const xEnd      = this.x + radius;\n        const yStart    = this.y - radius;\n        const yEnd      = this.y + radius;\n        for (let x = xStart; x <= xEnd; x++) {\n            Tile.tilesHitMerge(this.gameField.hitCell(x, yStart), tiles);\n            Tile.tilesHitMerge(this.gameField.hitCell(x, yEnd), tiles);\n        }\n        for (let y = yStart + 1; y <= yEnd - 1; y++) {\n            Tile.tilesHitMerge(this.gameField.hitCell(xStart, y), tiles);\n            Tile.tilesHitMerge(this.gameField.hitCell(xEnd, y), tiles);\n        }\n        return tiles;\n    }\n}\n","import {BonusType} from \"../../entities/EntityTile\";\nimport {Tile} from \"../Tile\";\nimport {CellDataAsUnion} from \"../../entities/EntityCell\";\n\nexport class TileBonus extends  Tile {\n\n    constructor(type: BonusType) {\n        super(type);\n    }\n\n    get typeString(): CellDataAsUnion { return BonusType[this.type] as CellDataAsUnion };\n}\n","import {BlockType} from \"../../entities/EntityTile\";\nimport { TileBlock } from \"./TileBlock\";\n\nexport class TileBox extends  TileBlock {\n\n    constructor() {\n        super(BlockType.box);\n    }\n}\n","import {BlockType} from \"../../entities/EntityTile\";\nimport { TileBlock } from \"./TileBlock\";\n\nexport class TileBubble extends  TileBlock {\n\n    constructor() {\n        super(BlockType.bubble);\n    }\n}\n","import {ColorType} from \"../entities/EntityTile\";\nimport { Tile } from \"./Tile\";\nimport {CellDataAsUnion} from \"../entities/EntityCell\";\n\nexport class TileColor extends  Tile {\n\n    constructor(type: ColorType) {\n        super(type);\n    }\n\n    get typeString(): CellDataAsUnion { return ColorType[this.type] as CellDataAsUnion };\n\n\n}\n","import {BonusType, ColorType, COLORS} from \"../../entities/EntityTile\";\nimport { TileBonus } from \"./TileBonus\";\nimport {Tile, TilesHit} from \"../Tile\";\nimport { Cell } from \"../../cell/Cell\";\n\nexport class TileDisco extends  TileBonus {\n\n    color: ColorType;\n    constructor() {\n        super(BonusType.disco);\n        this.color = Math.floor(Math.random() * COLORS.length);\n    }\n\n    hit(): TilesHit {\n        let tiles = super.hit();\n\n        const colorType = ColorType[this.color];\n        this.gameField.eachCell((cell: Cell) => {\n            if (cell.tile?.typeString === colorType) {\n                Tile.tilesHitMerge(cell.hit(), tiles);\n            }\n        });\n        return tiles;\n    }\n}\n","import {CellDataAsUnion} from \"./entities/EntityCell\";\nimport {Tile} from \"./tiles/Tile\";\nimport {BlockType, BonusType, ColorType, COLORS} from \"./entities/EntityTile\";\nimport {TileColor} from \"./tiles/TileColor\";\nimport {TileRocket} from \"./tiles/bonus/TileRocket\";\nimport {TileBomb} from \"./tiles/bonus/TileBomb\";\nimport {TileDisco} from \"./tiles/bonus/TileDisco\";\nimport {TileBox} from \"./tiles/block/TileBox\";\nimport {TileBubble} from \"./tiles/block/TileBubble\";\n\nconst TILE_CLASSES = {\n    [BonusType[BonusType.rocket]]:      TileRocket,\n    [BonusType[BonusType.bomb]]:        TileBomb,\n    [BonusType[BonusType.disco]]:       TileDisco,\n\n    [BlockType[BlockType.box]]:         TileBox,\n    [BlockType[BlockType.bubble]]:      TileBubble\n};\n\nclass TileFactory {\n    constructor() {\n    }\n\n    create (obj: CellDataAsUnion): Tile | undefined {\n\n        if (obj in ColorType)\n            return this.createTileColor(ColorType[obj]);\n\n        const tileClass = TILE_CLASSES[obj];\n        if(!tileClass)\n            return;\n\n        return new tileClass();\n    }\n\n    createTileColor(colorType: ColorType): TileColor {\n        return new TileColor(colorType);\n    }\n\n    get randomTile(): Tile {\n        return this.create(this.randomType);\n\n    }\n\n    get randomType(): CellDataAsUnion {\n        const colorIndex = Math.floor(Math.random() * COLORS.length);\n        return COLORS[colorIndex] as CellDataAsUnion;\n    }\n}\n\nexport default new TileFactory();\n","import {BonusType, COLORS} from \"../../entities/EntityTile\";\nimport { TileBonus } from \"./TileBonus\";\nimport EnumToArray from \"../../utils/EnumToArray\";\nimport {Tile, TileEvent, TilesHit} from \"../Tile\";\n\nexport enum RocketDirection {\n    horizontal,\n    vertical,\n    cross\n}\nconst DIRECTIONS = EnumToArray(RocketDirection);\n\nexport class TileRocket extends  TileBonus {\n\n    radius: number = 0;\n    direction: RocketDirection;\n\n    constructor() {\n        super(BonusType.rocket);\n        this.direction = Math.floor(Math.random() * 2);\n    }\n\n    hit(): TilesHit {\n        let tiles = super.hit();\n\n        switch (this.direction) {\n            case RocketDirection.horizontal:\n                Tile.tilesHitMerge(this._hitHorizontal(), tiles);\n                break;\n            case RocketDirection.vertical:\n                Tile.tilesHitMerge(this._hitVertical(), tiles);\n                break;\n            case RocketDirection.cross:\n                Tile.tilesHitMerge(this._hitHorizontal(), tiles);\n                Tile.tilesHitMerge(this._hitVertical(), tiles);\n                break;\n        }\n\n        return tiles;\n    }\n\n    private _hitHorizontal(): TilesHit {\n        let tiles: TilesHit = [];\n\n        for (let i = 1; i < this.gameField.columnCount; i++) {\n            let tilesGroup: TilesHit = [];\n            for (let y = this.y - this.radius; y <= this.y + this.radius; y++) {\n                Tile.tilesHitMerge(this.gameField.hitCell(this.x + i, y), tilesGroup);\n                Tile.tilesHitMerge(this.gameField.hitCell(this.x - i, y), tilesGroup);\n            }\n            tiles.push(...tilesGroup);\n        }\n        return tiles;\n    }\n\n    private _hitVertical() {\n        let tiles: TilesHit = [];\n        for (let i = 1; i < this.gameField.rowCount; i++) {\n            let tilesGroup: TilesHit = [];\n            for (let x = this.x - this.radius; x <= this.x + this.radius; x++) {\n                Tile.tilesHitMerge(this.gameField.hitCell(x, this.y + i), tilesGroup);\n                Tile.tilesHitMerge(this.gameField.hitCell(x, this.y - i), tilesGroup);\n            }\n            tiles.push(...tilesGroup);\n        }\n        return tiles;\n    }\n\n\n\n}\n","import { _decorator, Component, Node, UITransform, Sprite, Button, log, Vec2, Vec3, tween, v2, v3 } from 'cc';\nimport { CellBack } from './CellBack';\nimport {Cell} from \"../../logic/cell/Cell\";\nimport {GameFieldIcons} from \"../game/GameFieldIcons\";\nimport {Tile, TileEvent} from \"../../logic/tiles/Tile\";\nimport {IconFactory} from \"../tiles/factory/IconFactory\";\nimport EventManager from \"../../logic/EventManager\";\nimport {Icon} from \"../tiles/Icon\";\nimport {CellTilesEvent} from \"../../logic/cell/CellTiles\";\nconst { ccclass, property } = _decorator;\n\nexport enum ViewCellEvent {\n    click = 'ViewCellClick'\n}\n\n@ccclass('ViewCell')\nexport class ViewCell extends Component {\n\n    cell: Cell;\n    gameFiledView: GameFieldIcons;\n\n    init(gameFiledView: GameFieldIcons, cell: Cell) {\n        this.gameFiledView = gameFiledView;\n        this.cell = cell;\n        this._createIcons();\n    }\n\n    private _createIcons() {\n        this.cell.tiles.forEach(tile => this._createIcon(tile));\n    }\n\n    private _createIcon(tile: Tile): Icon {\n        let icon = IconFactory.instance.create(tile);\n        icon.gameFiledView = this.gameFiledView;\n        icon.node.setParent(this.node);\n        return icon;\n    }\n\n    start() {\n        this.node.on(Node.EventType.TOUCH_END, this.onClick, this);\n        this.cell.subscribe(CellTilesEvent.create, this.onCreateTile.bind(this), this);\n        this.cell.subscribe(CellTilesEvent.insert, this.onAddTile.bind(this), this);\n        this.cell.subscribe(CellTilesEvent.replace, this.onReplaceTile.bind(this), this);\n    }\n\n    onDestroy() {\n        this.node.children.forEach((iconNode: Node) => {\n            let icon = iconNode.getComponent(Icon);\n            if(icon)\n                icon.destroy();\n        });\n        this.node.removeAllChildren();\n\n        this.node.off(Node.EventType.TOUCH_END, this.onClick, this);\n        this.cell.unsubscribeTag(this);\n    }\n\n    onCreateTile(tile: Tile) {\n        this._createIcon(tile);\n    }\n\n    onAddTile(tile: Tile) {\n\n    }\n\n    onReplaceTile(tile: Tile) {\n        this.node.removeAllChildren();\n        this._createIcon(tile);\n    }\n\n    onClick(event) {\n        if(this.cell.isHole)\n            return;\n        const tile = this.cell.tile;\n        if(!tile)\n            return;\n\n        log(`cell [${this.cell.x},${this.cell.y}] click: ${tile.typeString}`);\n        EventManager.dispatch(ViewCellEvent.click, this);\n    }\n\n    get icon(): Icon | undefined {\n        let node = this.node.children[0];\n        return node?.getComponent(Icon);\n    }\n\n    async drop(delay: number = 0): Promise<ViewCell> {\n        let promises = [];\n        this.node.children.forEach((iconNode: Node) => {\n            let icon = iconNode.getComponent(Icon);\n            promises.push(icon.drop(delay));\n        });\n\n        return new Promise(resolve => {\n            Promise.all(promises).then(()=> { resolve(this) } );\n        });\n    }\n\n}\n\n","\nimport { _decorator, Component, Node, log, UITransform, Size, size, Enum, v2, Vec2, Vec3, v3, view } from 'cc';\nconst { ccclass, property, executeInEditMode, requireComponent } = _decorator;\n\n/**\n * Predefined variables\n * Name = WidgetScale\n * DateTime = Thu Mar 31 2022 20:28:49 GMT+0300 (Москва, стандартное время)\n * Author = limetris\n * FileBasename = WidgetFit.ts\n * FileBasenameNoExtension = WidgetFit\n * URL = db://assets/Scripts/Components/WidgetFit.ts\n * ManualUrl = https://docs.cocos.com/creator/3.4/manual/en/\n *\n */\n\nexport enum WidgetFitType {\n    NONE= 0,\n    WIDTH= 1,\n    HEIGHT= 2,\n    ALL= 3\n}\n\n@ccclass('WidgetFit')\n@requireComponent(UITransform)\n@executeInEditMode\nexport class WidgetFit extends Component {\n\n    @property(Node) _target: Node = undefined;\n    @property(Node) get target () : Node { return this._target;  }\n    set target (value: Node) {\n        this._removeListeners();\n        this._target = value;\n        this._init();\n    }\n\n    @property({type: Enum(WidgetFitType)}) _scaleType = WidgetFitType.NONE;\n    @property({type: Enum(WidgetFitType)}) get scaleType () : WidgetFitType { return this._scaleType;  }\n    set scaleType (value: WidgetFitType) { this._scaleType = value;  this._resized();  }\n\n    private _transform: UITransform = undefined;\n    private _targetTransform: UITransform = undefined;\n    private _startSize: Size = Size.ZERO;\n    private _startScale: Vec2 = Vec2.ONE;\n    private _ratio: number = 0;\n\n    start () {\n        this._transform = this.getComponent(UITransform);\n        this._startSize = size(this._transform.width * this._startScale.x, this._transform.height * this._startScale.y);\n        this._ratio = this._startSize.width / this._startSize.height;\n        if(!this._target)\n            this._target = this.node.parent;\n        this._init();\n    }\n\n    protected onDisable () {\n        this._removeListeners();\n    }\n\n    private _init() {\n\n        this._targetTransform = undefined;\n        if (!this._target)\n            return;\n\n        this._initTransform();\n        this._initListeners();\n        this._resized();\n    }\n\n    private  _initTransform() {\n        this._targetTransform = this._target?.getComponent(UITransform);\n        if (this._targetTransform)\n            return;\n    }\n\n    private _initListeners() {\n        this._target?.on(Node.EventType.SIZE_CHANGED, this._resized.bind(this), this);\n    }\n\n    private _removeListeners() {\n        this._targetTransform = undefined;\n        this._target?.off(Node.EventType.SIZE_CHANGED, this._resized.bind(this), this);\n    }\n\n    private _resized() {\n        if (!this._targetTransform)\n            return;\n\n        switch (this._scaleType) {\n            case WidgetFitType.NONE:\n                break;\n            case WidgetFitType.WIDTH:\n                this._fitWidth();\n                break;\n            case WidgetFitType.HEIGHT:\n                this._fitHeight();\n                break;\n            case WidgetFitType.ALL:\n                let scale = Math.min(this._targetTransform.width / this._startSize.width, this._targetTransform.height / this._startSize.height);\n                this.node.setScale(scale, scale);\n                break;\n        }\n    }\n\n    private _fitWidth() {\n        const scale = this._targetTransform.width / this._startSize.width;\n        this.node.setScale(scale, scale);\n    }\n\n    private _fitHeight() {\n        const scale = this._targetTransform.height / this._startSize.height;\n        this.node.setScale(scale, scale);\n    }\n}\n","import { _decorator, Component, Node, UIOpacity, tween } from 'cc';\nconst { ccclass, property, requireComponent } = _decorator;\n\n@ccclass('WindowBase')\n@requireComponent(UIOpacity)\nexport class WindowBase extends Component {\n\n    open(...args: any[]) {\n        this.fadeOut(() => {\n\n        });\n    }\n\n    close() {\n        this.fadeIn(() => {\n            this.node.removeFromParent();\n        });\n    }\n\n    fadeIn(callback?: Function) {\n        this.fade(255,0, callback);\n    }\n\n    fadeOut(callback?: Function) {\n        this.fade(0, 255, callback);\n    }\n\n    fade(startOpacity: number, endOpacity: number, callback?: Function) {\n        let opa = this.getComponent(UIOpacity);\n\n        opa.opacity = startOpacity;\n        tween(opa)\n            .to(0.5, { opacity: endOpacity }, {\n                onComplete: (target?: object) => {\n                    opa.opacity = endOpacity;\n                    if (callback)\n                        callback();\n                }\n            })\n            .start();\n    }\n}\n\n","import { _decorator, Component, Node } from 'cc';\nimport {WindowBase} from \"./WindowBase\";\nconst { ccclass, property } = _decorator;\n\n@ccclass('WindowGameOver')\nexport class WindowGameOver extends WindowBase {\n    static ID = 'WindowGameOver';\n}\n\n","import { _decorator, Component, Node, assert, Prefab, log, instantiate } from 'cc';\nimport {WindowBase} from \"./WindowBase\";\nconst { ccclass, property } = _decorator;\n\ntype WindowPrefabMap = Map<string, Prefab>;\n\n@ccclass('WindowManager')\nexport class WindowManager extends Component {\n\n    @property(Prefab)\n    windowsPrefab: Prefab[] = [];\n\n    private _windowPrefabMap: WindowPrefabMap = new Map<string, Prefab>();\n    private static _instance: WindowManager = null;\n\n    public static get instance(): WindowManager {\n        assert(this._instance, \"WindowManager instance is null\");\n        return this._instance;\n    }\n\n    onLoad() {\n        assert(!WindowManager._instance, \"Only one instance allowed\");\n        WindowManager._instance = this;\n\n        this._initWindows();\n    }\n\n    private _initWindows() {\n        this._windowPrefabMap.clear();\n        this.windowsPrefab.forEach((prefab) => {\n            // const windowNode = prefab.data as Node;\n            // let window = windowNode.getComponent(WindowBase);\n            this._windowPrefabMap.set(prefab.data.name, prefab);\n        });\n        log(this._windowPrefabMap);\n    }\n\n    private _createWindow(windowType: string): WindowBase {\n        let prefab = this._windowPrefabMap.get(windowType);\n        if (!prefab)\n            return;\n        let node = instantiate(prefab);\n        return node.getComponent(WindowBase);\n    }\n\n    open(windowType: any, ...args: any[]) {\n        if (typeof windowType !== 'string')\n            windowType = windowType.ID;\n\n        let window = this._createWindow(windowType);\n        if(!window)\n            return;\n\n        window.node.setParent(this.node);\n        window.open(args);\n    }\n}\n","import { _decorator, Component, Node } from 'cc';\nimport { WindowBase } from './WindowBase';\nconst { ccclass, property } = _decorator;\n\n@ccclass('WindowWin')\nexport class WindowWin extends WindowBase {\n    static ID = 'WindowWin';\n}\n\n"]}